// <auto-generated />
#nullable enable
class ThemeVariantScopeConverter :
    WriteOnlyJsonConverter<ThemeVariantScope>,
    IAvaloniaConverter<ThemeVariantScope>
{
    public override void Write(VerifyJsonWriter writer, ThemeVariantScope value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        DecoratorConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, ThemeVariantScope value)
    {
        if (value.ShouldIncludeProperty(ThemeVariantScope.RequestedThemeVariantProperty))
        if (!object.Equals(ThemeVariantScope.RequestedThemeVariantProperty.GetDefaultValue(typeof(ThemeVariantScope)), value.RequestedThemeVariant))
        {
            writer.WriteMember(value, value.RequestedThemeVariant, "RequestedThemeVariant");
        }
    }

    public static bool MemberHasValue(ThemeVariantScope target, string member, object? value)
    {
        if (member == "RequestedThemeVariant")
        {
            return object.Equals(target.RequestedThemeVariant, value);
        }
        DecoratorConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
