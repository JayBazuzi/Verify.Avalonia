// <auto-generated />
#nullable enable
class VisualConverter :
    WriteOnlyJsonConverter<Visual>
{
    public override void Write(VerifyJsonWriter writer, Visual value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Visual value)
    {
        if (Visual.BoundsProperty.ShouldIncludeProperty(value, value.Bounds))
        {
            writer.WriteMember(value, value.Bounds, "Bounds");
        }
        if (Visual.ClipToBoundsProperty.ShouldIncludeProperty(value, value.ClipToBounds))
        {
            writer.WriteMember(value, value.ClipToBounds, "ClipToBounds");
        }
        if (Visual.ClipProperty.ShouldIncludeProperty(value, value.Clip))
        {
            writer.WriteMember(value, value.Clip, "Clip");
        }
        writer.WriteMember(value, value.IsEffectivelyVisible, "IsEffectivelyVisible");
        if (Visual.IsVisibleProperty.ShouldIncludeProperty(value, value.IsVisible))
        {
            writer.WriteMember(value, value.IsVisible, "IsVisible");
        }
        if (Visual.OpacityProperty.ShouldIncludeProperty(value, value.Opacity))
        {
            writer.WriteMember(value, value.Opacity, "Opacity");
        }
        if (Visual.OpacityMaskProperty.ShouldIncludeProperty(value, value.OpacityMask))
        {
            writer.WriteMember(value, value.OpacityMask, "OpacityMask");
        }
        if (Visual.EffectProperty.ShouldIncludeProperty(value, value.Effect))
        {
            writer.WriteMember(value, value.Effect, "Effect");
        }
        if (Visual.HasMirrorTransformProperty.ShouldIncludeProperty(value, value.HasMirrorTransform))
        {
            writer.WriteMember(value, value.HasMirrorTransform, "HasMirrorTransform");
        }
        if (Visual.RenderTransformProperty.ShouldIncludeProperty(value, value.RenderTransform))
        {
            writer.WriteMember(value, value.RenderTransform, "RenderTransform");
        }
        if (Visual.RenderTransformOriginProperty.ShouldIncludeProperty(value, value.RenderTransformOrigin))
        {
            writer.WriteMember(value, value.RenderTransformOrigin, "RenderTransformOrigin");
        }
        if (Visual.FlowDirectionProperty.ShouldIncludeProperty(value, value.FlowDirection))
        {
            writer.WriteMember(value, value.FlowDirection, "FlowDirection");
        }
        if (Visual.ZIndexProperty.ShouldIncludeProperty(value, value.ZIndex))
        {
            writer.WriteMember(value, value.ZIndex, "ZIndex");
        }
    }
}
