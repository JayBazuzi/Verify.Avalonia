// <auto-generated />
#nullable enable
class DecoratorConverter :
    WriteOnlyJsonConverter<Decorator>,
    IAvaloniaConverter<Decorator>
{
    public override void Write(VerifyJsonWriter writer, Decorator value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Decorator value)
    {
        if (!object.Equals(Decorator.ChildProperty.GetDefaultValue(typeof(Decorator)), value.Child))
        {
            writer.WriteMember(value, value.Child, "Child");
        }
        if (!object.Equals(Decorator.PaddingProperty.GetDefaultValue(typeof(Decorator)), value.Padding))
        {
            writer.WriteMember(value, value.Padding, "Padding");
        }
    }

    public static bool MemberHasValue(Decorator target, string member, object? value)
    {
        if (member == "Child")
        {
            return object.Equals(target.Child, value);
        }
        if (member == "Padding")
        {
            return object.Equals(target.Padding, value);
        }
        ControlConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
