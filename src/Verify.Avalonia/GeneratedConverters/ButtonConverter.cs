// <auto-generated />
#nullable enable
class ButtonConverter :
    WriteOnlyJsonConverter<Button>
{
    public override void Write(VerifyJsonWriter writer, Button value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ContentControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Button value)
    {
        var type = typeof(Button);
        if (value.ShouldIncludeProperty(Button.ClickModeProperty))
        if (!object.Equals(Button.ClickModeProperty.GetDefaultValue(type), value.ClickMode))
        {
            writer.WriteMember(value, value.ClickMode, "ClickMode");
        }
        if (value.ShouldIncludeProperty(Button.CommandProperty))
        if (!object.Equals(Button.CommandProperty.GetDefaultValue(type), value.Command))
        {
            writer.WriteMember(value, value.Command, "Command");
        }
        if (value.ShouldIncludeProperty(Button.HotKeyProperty))
        if (!object.Equals(Button.HotKeyProperty.GetDefaultValue(type), value.HotKey))
        {
            writer.WriteMember(value, value.HotKey, "HotKey");
        }
        if (value.ShouldIncludeProperty(Button.CommandParameterProperty))
        if (!object.Equals(Button.CommandParameterProperty.GetDefaultValue(type), value.CommandParameter))
        {
            writer.WriteMember(value, value.CommandParameter, "CommandParameter");
        }
        if (value.ShouldIncludeProperty(Button.IsDefaultProperty))
        if (!object.Equals(Button.IsDefaultProperty.GetDefaultValue(type), value.IsDefault))
        {
            writer.WriteMember(value, value.IsDefault, "IsDefault");
        }
        if (value.ShouldIncludeProperty(Button.IsCancelProperty))
        if (!object.Equals(Button.IsCancelProperty.GetDefaultValue(type), value.IsCancel))
        {
            writer.WriteMember(value, value.IsCancel, "IsCancel");
        }
        if (value.ShouldIncludeProperty(Button.IsPressedProperty))
        if (!object.Equals(Button.IsPressedProperty.GetUnsetValue(type), value.IsPressed))
        {
            writer.WriteMember(value, value.IsPressed, "IsPressed");
        }
        if (value.ShouldIncludeProperty(Button.FlyoutProperty))
        if (!object.Equals(Button.FlyoutProperty.GetDefaultValue(type), value.Flyout))
        {
            writer.WriteMember(value, value.Flyout, "Flyout");
        }
    }
}
