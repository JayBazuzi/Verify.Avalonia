// <auto-generated />
#nullable enable
class CalendarConverter :
    WriteOnlyJsonConverter<Calendar>
{
    public override void Write(VerifyJsonWriter writer, Calendar value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TemplatedControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Calendar value)
    {
        var type = typeof(Calendar);
        if (Calendar.FirstDayOfWeekProperty.ShouldIncludeProperty(value, value.FirstDayOfWeek))
        {
            writer.WriteMember(value, value.FirstDayOfWeek, "FirstDayOfWeek");
        }
        if (Calendar.IsTodayHighlightedProperty.ShouldIncludeProperty(value, value.IsTodayHighlighted))
        {
            writer.WriteMember(value, value.IsTodayHighlighted, "IsTodayHighlighted");
        }
        if (Calendar.HeaderBackgroundProperty.ShouldIncludeProperty(value, value.HeaderBackground))
        {
            writer.WriteMember(value, value.HeaderBackground, "HeaderBackground");
        }
        if (Calendar.DisplayModeProperty.ShouldIncludeProperty(value, value.DisplayMode))
        {
            writer.WriteMember(value, value.DisplayMode, "DisplayMode");
        }
        if (Calendar.SelectionModeProperty.ShouldIncludeProperty(value, value.SelectionMode))
        {
            writer.WriteMember(value, value.SelectionMode, "SelectionMode");
        }
        if (Calendar.SelectedDateProperty.ShouldIncludeProperty(value, value.SelectedDate))
        {
            writer.WriteMember(value, value.SelectedDate, "SelectedDate");
        }
        writer.WriteMember(value, value.SelectedDates, "SelectedDates");
        if (Calendar.DisplayDateProperty.ShouldIncludeProperty(value, value.DisplayDate))
        {
            writer.WriteMember(value, value.DisplayDate, "DisplayDate");
        }
        if (Calendar.DisplayDateStartProperty.ShouldIncludeProperty(value, value.DisplayDateStart))
        {
            writer.WriteMember(value, value.DisplayDateStart, "DisplayDateStart");
        }
        writer.WriteMember(value, value.BlackoutDates, "BlackoutDates");
        if (Calendar.DisplayDateEndProperty.ShouldIncludeProperty(value, value.DisplayDateEnd))
        {
            writer.WriteMember(value, value.DisplayDateEnd, "DisplayDateEnd");
        }
    }
}
