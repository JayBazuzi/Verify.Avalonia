// <auto-generated />
#nullable enable
class ContentPresenterConverter :
    WriteOnlyJsonConverter<ContentPresenter>
{
    public override void Write(VerifyJsonWriter writer, ContentPresenter value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, ContentPresenter value)
    {
        var type = typeof(ContentPresenter);
        if (ContentPresenter.BackgroundProperty.ShouldIncludeProperty(value, value.Background))
        {
            writer.WriteMember(value, value.Background, "Background");
        }
        if (ContentPresenter.BorderBrushProperty.ShouldIncludeProperty(value, value.BorderBrush))
        {
            writer.WriteMember(value, value.BorderBrush, "BorderBrush");
        }
        if (ContentPresenter.BorderThicknessProperty.ShouldIncludeProperty(value, value.BorderThickness))
        {
            writer.WriteMember(value, value.BorderThickness, "BorderThickness");
        }
        if (ContentPresenter.CornerRadiusProperty.ShouldIncludeProperty(value, value.CornerRadius))
        {
            writer.WriteMember(value, value.CornerRadius, "CornerRadius");
        }
        if (ContentPresenter.BoxShadowProperty.ShouldIncludeProperty(value, value.BoxShadow))
        {
            writer.WriteMember(value, value.BoxShadow, "BoxShadow");
        }
        if (ContentPresenter.ForegroundProperty.ShouldIncludeProperty(value, value.Foreground))
        {
            writer.WriteMember(value, value.Foreground, "Foreground");
        }
        if (ContentPresenter.FontFamilyProperty.ShouldIncludeProperty(value, value.FontFamily))
        {
            writer.WriteMember(value, value.FontFamily, "FontFamily");
        }
        if (ContentPresenter.FontSizeProperty.ShouldIncludeProperty(value, value.FontSize))
        {
            writer.WriteMember(value, value.FontSize, "FontSize");
        }
        if (ContentPresenter.FontStyleProperty.ShouldIncludeProperty(value, value.FontStyle))
        {
            writer.WriteMember(value, value.FontStyle, "FontStyle");
        }
        if (ContentPresenter.FontWeightProperty.ShouldIncludeProperty(value, value.FontWeight))
        {
            writer.WriteMember(value, value.FontWeight, "FontWeight");
        }
        if (ContentPresenter.FontStretchProperty.ShouldIncludeProperty(value, value.FontStretch))
        {
            writer.WriteMember(value, value.FontStretch, "FontStretch");
        }
        if (ContentPresenter.TextAlignmentProperty.ShouldIncludeProperty(value, value.TextAlignment))
        {
            writer.WriteMember(value, value.TextAlignment, "TextAlignment");
        }
        if (ContentPresenter.TextWrappingProperty.ShouldIncludeProperty(value, value.TextWrapping))
        {
            writer.WriteMember(value, value.TextWrapping, "TextWrapping");
        }
        if (ContentPresenter.TextTrimmingProperty.ShouldIncludeProperty(value, value.TextTrimming))
        {
            writer.WriteMember(value, value.TextTrimming, "TextTrimming");
        }
        if (ContentPresenter.LineHeightProperty.ShouldIncludeProperty(value, value.LineHeight))
        {
            writer.WriteMember(value, value.LineHeight, "LineHeight");
        }
        if (ContentPresenter.MaxLinesProperty.ShouldIncludeProperty(value, value.MaxLines))
        {
            writer.WriteMember(value, value.MaxLines, "MaxLines");
        }
        if (ContentPresenter.ChildProperty.ShouldIncludeProperty(value, value.Child))
        {
            writer.WriteMember(value, value.Child, "Child");
        }
        if (ContentPresenter.ContentProperty.ShouldIncludeProperty(value, value.Content))
        {
            writer.WriteMember(value, value.Content, "Content");
        }
        if (ContentPresenter.ContentTemplateProperty.ShouldIncludeProperty(value, value.ContentTemplate))
        {
            writer.WriteMember(value, value.ContentTemplate, "ContentTemplate");
        }
        if (ContentPresenter.HorizontalContentAlignmentProperty.ShouldIncludeProperty(value, value.HorizontalContentAlignment))
        {
            writer.WriteMember(value, value.HorizontalContentAlignment, "HorizontalContentAlignment");
        }
        if (ContentPresenter.VerticalContentAlignmentProperty.ShouldIncludeProperty(value, value.VerticalContentAlignment))
        {
            writer.WriteMember(value, value.VerticalContentAlignment, "VerticalContentAlignment");
        }
        if (ContentPresenter.PaddingProperty.ShouldIncludeProperty(value, value.Padding))
        {
            writer.WriteMember(value, value.Padding, "Padding");
        }
        if (ContentPresenter.RecognizesAccessKeyProperty.ShouldIncludeProperty(value, value.RecognizesAccessKey))
        {
            writer.WriteMember(value, value.RecognizesAccessKey, "RecognizesAccessKey");
        }
    }
}
