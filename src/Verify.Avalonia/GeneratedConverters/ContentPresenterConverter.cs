// <auto-generated />
#nullable enable
class ContentPresenterConverter :
    WriteOnlyJsonConverter<ContentPresenter>,
    IAvaloniaConverter<ContentPresenter>
{
    public override void Write(VerifyJsonWriter writer, ContentPresenter value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, ContentPresenter value)
    {
        if (!object.Equals(ContentPresenter.BackgroundProperty.GetDefaultValue(typeof(ContentPresenter)), value.Background))
        {
            writer.WriteMember(value, value.Background, "Background");
        }
        if (!object.Equals(ContentPresenter.BorderBrushProperty.GetDefaultValue(typeof(ContentPresenter)), value.BorderBrush))
        {
            writer.WriteMember(value, value.BorderBrush, "BorderBrush");
        }
        if (!object.Equals(ContentPresenter.BorderThicknessProperty.GetDefaultValue(typeof(ContentPresenter)), value.BorderThickness))
        {
            writer.WriteMember(value, value.BorderThickness, "BorderThickness");
        }
        if (!object.Equals(ContentPresenter.CornerRadiusProperty.GetDefaultValue(typeof(ContentPresenter)), value.CornerRadius))
        {
            writer.WriteMember(value, value.CornerRadius, "CornerRadius");
        }
        if (!object.Equals(ContentPresenter.BoxShadowProperty.GetDefaultValue(typeof(ContentPresenter)), value.BoxShadow))
        {
            writer.WriteMember(value, value.BoxShadow, "BoxShadow");
        }
        if (!object.Equals(ContentPresenter.ForegroundProperty.GetDefaultValue(typeof(ContentPresenter)), value.Foreground))
        {
            writer.WriteMember(value, value.Foreground, "Foreground");
        }
        if (!object.Equals(ContentPresenter.FontFamilyProperty.GetDefaultValue(typeof(ContentPresenter)), value.FontFamily))
        {
            writer.WriteMember(value, value.FontFamily, "FontFamily");
        }
        if (!object.Equals(ContentPresenter.FontSizeProperty.GetDefaultValue(typeof(ContentPresenter)), value.FontSize))
        {
            writer.WriteMember(value, value.FontSize, "FontSize");
        }
        if (!object.Equals(ContentPresenter.FontStyleProperty.GetDefaultValue(typeof(ContentPresenter)), value.FontStyle))
        {
            writer.WriteMember(value, value.FontStyle, "FontStyle");
        }
        if (!object.Equals(ContentPresenter.FontWeightProperty.GetDefaultValue(typeof(ContentPresenter)), value.FontWeight))
        {
            writer.WriteMember(value, value.FontWeight, "FontWeight");
        }
        if (!object.Equals(ContentPresenter.FontStretchProperty.GetDefaultValue(typeof(ContentPresenter)), value.FontStretch))
        {
            writer.WriteMember(value, value.FontStretch, "FontStretch");
        }
        if (!object.Equals(ContentPresenter.TextAlignmentProperty.GetDefaultValue(typeof(ContentPresenter)), value.TextAlignment))
        {
            writer.WriteMember(value, value.TextAlignment, "TextAlignment");
        }
        if (!object.Equals(ContentPresenter.TextWrappingProperty.GetDefaultValue(typeof(ContentPresenter)), value.TextWrapping))
        {
            writer.WriteMember(value, value.TextWrapping, "TextWrapping");
        }
        if (!object.Equals(ContentPresenter.TextTrimmingProperty.GetDefaultValue(typeof(ContentPresenter)), value.TextTrimming))
        {
            writer.WriteMember(value, value.TextTrimming, "TextTrimming");
        }
        if (!object.Equals(ContentPresenter.LineHeightProperty.GetDefaultValue(typeof(ContentPresenter)), value.LineHeight))
        {
            writer.WriteMember(value, value.LineHeight, "LineHeight");
        }
        if (!object.Equals(ContentPresenter.MaxLinesProperty.GetDefaultValue(typeof(ContentPresenter)), value.MaxLines))
        {
            writer.WriteMember(value, value.MaxLines, "MaxLines");
        }
        if (!object.Equals(ContentPresenter.ChildProperty.GetUnsetValue(typeof(ContentPresenter)), value.Child))
        {
            writer.WriteMember(value, value.Child, "Child");
        }
        if (!object.Equals(ContentPresenter.ContentProperty.GetDefaultValue(typeof(ContentPresenter)), value.Content))
        {
            writer.WriteMember(value, value.Content, "Content");
        }
        if (!object.Equals(ContentPresenter.ContentTemplateProperty.GetDefaultValue(typeof(ContentPresenter)), value.ContentTemplate))
        {
            writer.WriteMember(value, value.ContentTemplate, "ContentTemplate");
        }
        if (!object.Equals(ContentPresenter.HorizontalContentAlignmentProperty.GetDefaultValue(typeof(ContentPresenter)), value.HorizontalContentAlignment))
        {
            writer.WriteMember(value, value.HorizontalContentAlignment, "HorizontalContentAlignment");
        }
        if (!object.Equals(ContentPresenter.VerticalContentAlignmentProperty.GetDefaultValue(typeof(ContentPresenter)), value.VerticalContentAlignment))
        {
            writer.WriteMember(value, value.VerticalContentAlignment, "VerticalContentAlignment");
        }
        if (!object.Equals(ContentPresenter.PaddingProperty.GetDefaultValue(typeof(ContentPresenter)), value.Padding))
        {
            writer.WriteMember(value, value.Padding, "Padding");
        }
        if (!object.Equals(ContentPresenter.RecognizesAccessKeyProperty.GetDefaultValue(typeof(ContentPresenter)), value.RecognizesAccessKey))
        {
            writer.WriteMember(value, value.RecognizesAccessKey, "RecognizesAccessKey");
        }
    }

    public static bool MemberHasValue(ContentPresenter target, string member, object? value)
    {
        if (member == "Background")
        {
            return object.Equals(target.Background, value);
        }
        if (member == "BorderBrush")
        {
            return object.Equals(target.BorderBrush, value);
        }
        if (member == "BorderThickness")
        {
            return object.Equals(target.BorderThickness, value);
        }
        if (member == "CornerRadius")
        {
            return object.Equals(target.CornerRadius, value);
        }
        if (member == "BoxShadow")
        {
            return object.Equals(target.BoxShadow, value);
        }
        if (member == "Foreground")
        {
            return object.Equals(target.Foreground, value);
        }
        if (member == "FontFamily")
        {
            return object.Equals(target.FontFamily, value);
        }
        if (member == "FontSize")
        {
            return object.Equals(target.FontSize, value);
        }
        if (member == "FontStyle")
        {
            return object.Equals(target.FontStyle, value);
        }
        if (member == "FontWeight")
        {
            return object.Equals(target.FontWeight, value);
        }
        if (member == "FontStretch")
        {
            return object.Equals(target.FontStretch, value);
        }
        if (member == "TextAlignment")
        {
            return object.Equals(target.TextAlignment, value);
        }
        if (member == "TextWrapping")
        {
            return object.Equals(target.TextWrapping, value);
        }
        if (member == "TextTrimming")
        {
            return object.Equals(target.TextTrimming, value);
        }
        if (member == "LineHeight")
        {
            return object.Equals(target.LineHeight, value);
        }
        if (member == "MaxLines")
        {
            return object.Equals(target.MaxLines, value);
        }
        if (member == "Child")
        {
            return object.Equals(target.Child, value);
        }
        if (member == "Content")
        {
            return object.Equals(target.Content, value);
        }
        if (member == "ContentTemplate")
        {
            return object.Equals(target.ContentTemplate, value);
        }
        if (member == "HorizontalContentAlignment")
        {
            return object.Equals(target.HorizontalContentAlignment, value);
        }
        if (member == "VerticalContentAlignment")
        {
            return object.Equals(target.VerticalContentAlignment, value);
        }
        if (member == "Padding")
        {
            return object.Equals(target.Padding, value);
        }
        if (member == "RecognizesAccessKey")
        {
            return object.Equals(target.RecognizesAccessKey, value);
        }
        ControlConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
