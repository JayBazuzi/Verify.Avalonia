// <auto-generated />
#nullable enable
class InputElementConverter :
    WriteOnlyJsonConverter<InputElement>,
    IAvaloniaConverter<InputElement>
{
    public override void Write(VerifyJsonWriter writer, InputElement value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        InteractiveConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, InputElement value)
    {
        if (!object.Equals(InputElement.FocusableProperty.GetDefaultValue(typeof(InputElement)), value.Focusable))
        {
            writer.WriteMember(value, value.Focusable, "Focusable");
        }
        if (!object.Equals(InputElement.IsEnabledProperty.GetDefaultValue(typeof(InputElement)), value.IsEnabled))
        {
            writer.WriteMember(value, value.IsEnabled, "IsEnabled");
        }
        if (!object.Equals(InputElement.CursorProperty.GetDefaultValue(typeof(InputElement)), value.Cursor))
        {
            writer.WriteMember(value, value.Cursor, "Cursor");
        }
        if (!object.Equals(InputElement.IsKeyboardFocusWithinProperty.GetUnsetValue(typeof(InputElement)), value.IsKeyboardFocusWithin))
        {
            writer.WriteMember(value, value.IsKeyboardFocusWithin, "IsKeyboardFocusWithin");
        }
        if (!object.Equals(InputElement.IsFocusedProperty.GetUnsetValue(typeof(InputElement)), value.IsFocused))
        {
            writer.WriteMember(value, value.IsFocused, "IsFocused");
        }
        if (!object.Equals(InputElement.IsHitTestVisibleProperty.GetDefaultValue(typeof(InputElement)), value.IsHitTestVisible))
        {
            writer.WriteMember(value, value.IsHitTestVisible, "IsHitTestVisible");
        }
        if (!object.Equals(InputElement.IsPointerOverProperty.GetUnsetValue(typeof(InputElement)), value.IsPointerOver))
        {
            writer.WriteMember(value, value.IsPointerOver, "IsPointerOver");
        }
        if (!object.Equals(InputElement.IsTabStopProperty.GetDefaultValue(typeof(InputElement)), value.IsTabStop))
        {
            writer.WriteMember(value, value.IsTabStop, "IsTabStop");
        }
        if (!object.Equals(InputElement.IsEffectivelyEnabledProperty.GetUnsetValue(typeof(InputElement)), value.IsEffectivelyEnabled))
        {
            writer.WriteMember(value, value.IsEffectivelyEnabled, "IsEffectivelyEnabled");
        }
        if (!object.Equals(InputElement.TabIndexProperty.GetDefaultValue(typeof(InputElement)), value.TabIndex))
        {
            writer.WriteMember(value, value.TabIndex, "TabIndex");
        }
        writer.WriteMember(value, value.KeyBindings, "KeyBindings");
        writer.WriteMember(value, value.GestureRecognizers, "GestureRecognizers");
    }

    public static bool MemberHasValue(InputElement target, string member, object? value)
    {
        if (member == "Focusable")
        {
            return object.Equals(target.Focusable, value);
        }
        if (member == "IsEnabled")
        {
            return object.Equals(target.IsEnabled, value);
        }
        if (member == "Cursor")
        {
            return object.Equals(target.Cursor, value);
        }
        if (member == "IsKeyboardFocusWithin")
        {
            return object.Equals(target.IsKeyboardFocusWithin, value);
        }
        if (member == "IsFocused")
        {
            return object.Equals(target.IsFocused, value);
        }
        if (member == "IsHitTestVisible")
        {
            return object.Equals(target.IsHitTestVisible, value);
        }
        if (member == "IsPointerOver")
        {
            return object.Equals(target.IsPointerOver, value);
        }
        if (member == "IsTabStop")
        {
            return object.Equals(target.IsTabStop, value);
        }
        if (member == "IsEffectivelyEnabled")
        {
            return object.Equals(target.IsEffectivelyEnabled, value);
        }
        if (member == "TabIndex")
        {
            return object.Equals(target.TabIndex, value);
        }
        if (member == "KeyBindings")
        {
            return object.Equals(target.KeyBindings, value);
        }
        if (member == "GestureRecognizers")
        {
            return object.Equals(target.GestureRecognizers, value);
        }
        InteractiveConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
