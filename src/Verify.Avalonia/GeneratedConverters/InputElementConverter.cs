// <auto-generated />
#nullable enable
class InputElementConverter :
    WriteOnlyJsonConverter<InputElement>
{
    public override void Write(VerifyJsonWriter writer, InputElement value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        InteractiveConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, InputElement value)
    {
        if (InputElement.FocusableProperty.ShouldIncludeProperty(value, value.Focusable))
        {
            writer.WriteMember(value, value.Focusable, "Focusable");
        }
        if (InputElement.IsEnabledProperty.ShouldIncludeProperty(value, value.IsEnabled))
        {
            writer.WriteMember(value, value.IsEnabled, "IsEnabled");
        }
        if (InputElement.CursorProperty.ShouldIncludeProperty(value, value.Cursor))
        {
            writer.WriteMember(value, value.Cursor, "Cursor");
        }
        if (InputElement.IsKeyboardFocusWithinProperty.ShouldIncludeProperty(value, value.IsKeyboardFocusWithin))
        {
            writer.WriteMember(value, value.IsKeyboardFocusWithin, "IsKeyboardFocusWithin");
        }
        if (InputElement.IsFocusedProperty.ShouldIncludeProperty(value, value.IsFocused))
        {
            writer.WriteMember(value, value.IsFocused, "IsFocused");
        }
        if (InputElement.IsHitTestVisibleProperty.ShouldIncludeProperty(value, value.IsHitTestVisible))
        {
            writer.WriteMember(value, value.IsHitTestVisible, "IsHitTestVisible");
        }
        if (InputElement.IsPointerOverProperty.ShouldIncludeProperty(value, value.IsPointerOver))
        {
            writer.WriteMember(value, value.IsPointerOver, "IsPointerOver");
        }
        if (InputElement.IsTabStopProperty.ShouldIncludeProperty(value, value.IsTabStop))
        {
            writer.WriteMember(value, value.IsTabStop, "IsTabStop");
        }
        if (InputElement.IsEffectivelyEnabledProperty.ShouldIncludeProperty(value, value.IsEffectivelyEnabled))
        {
            writer.WriteMember(value, value.IsEffectivelyEnabled, "IsEffectivelyEnabled");
        }
        if (InputElement.TabIndexProperty.ShouldIncludeProperty(value, value.TabIndex))
        {
            writer.WriteMember(value, value.TabIndex, "TabIndex");
        }
        writer.WriteMember(value, value.KeyBindings, "KeyBindings");
        writer.WriteMember(value, value.GestureRecognizers, "GestureRecognizers");
    }
}
