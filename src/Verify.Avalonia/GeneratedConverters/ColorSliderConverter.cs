// <auto-generated />
#nullable enable
class ColorSliderConverter :
    WriteOnlyJsonConverter<ColorSlider>
{
    public override void Write(VerifyJsonWriter writer, ColorSlider value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        SliderConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, ColorSlider value)
    {
        if (ColorSlider.ColorProperty.ShouldIncludeProperty(value, value.Color))
        {
            writer.WriteMember(value, value.Color, "Color");
        }
        if (ColorSlider.ColorComponentProperty.ShouldIncludeProperty(value, value.ColorComponent))
        {
            writer.WriteMember(value, value.ColorComponent, "ColorComponent");
        }
        if (ColorSlider.ColorModelProperty.ShouldIncludeProperty(value, value.ColorModel))
        {
            writer.WriteMember(value, value.ColorModel, "ColorModel");
        }
        if (ColorSlider.HsvColorProperty.ShouldIncludeProperty(value, value.HsvColor))
        {
            writer.WriteMember(value, value.HsvColor, "HsvColor");
        }
        if (ColorSlider.IsAlphaVisibleProperty.ShouldIncludeProperty(value, value.IsAlphaVisible))
        {
            writer.WriteMember(value, value.IsAlphaVisible, "IsAlphaVisible");
        }
        if (ColorSlider.IsPerceptiveProperty.ShouldIncludeProperty(value, value.IsPerceptive))
        {
            writer.WriteMember(value, value.IsPerceptive, "IsPerceptive");
        }
        if (ColorSlider.IsRoundingEnabledProperty.ShouldIncludeProperty(value, value.IsRoundingEnabled))
        {
            writer.WriteMember(value, value.IsRoundingEnabled, "IsRoundingEnabled");
        }
    }
}
