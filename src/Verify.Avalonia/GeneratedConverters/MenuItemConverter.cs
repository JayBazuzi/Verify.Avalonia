// <auto-generated />
#nullable enable
class MenuItemConverter :
    WriteOnlyJsonConverter<MenuItem>
{
    public override void Write(VerifyJsonWriter writer, MenuItem value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        HeaderedSelectingItemsControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, MenuItem value)
    {
        if (value.ShouldIncludeProperty(MenuItem.CommandProperty))
        if (!object.Equals(MenuItem.CommandProperty.GetDefaultValue(typeof(MenuItem)), value.Command))
        {
            writer.WriteMember(value, value.Command, "Command");
        }
        if (value.ShouldIncludeProperty(MenuItem.HotKeyProperty))
        if (!object.Equals(MenuItem.HotKeyProperty.GetDefaultValue(typeof(MenuItem)), value.HotKey))
        {
            writer.WriteMember(value, value.HotKey, "HotKey");
        }
        if (value.ShouldIncludeProperty(MenuItem.CommandParameterProperty))
        if (!object.Equals(MenuItem.CommandParameterProperty.GetDefaultValue(typeof(MenuItem)), value.CommandParameter))
        {
            writer.WriteMember(value, value.CommandParameter, "CommandParameter");
        }
        if (value.ShouldIncludeProperty(MenuItem.IconProperty))
        if (!object.Equals(MenuItem.IconProperty.GetDefaultValue(typeof(MenuItem)), value.Icon))
        {
            writer.WriteMember(value, value.Icon, "Icon");
        }
        if (value.ShouldIncludeProperty(MenuItem.InputGestureProperty))
        if (!object.Equals(MenuItem.InputGestureProperty.GetDefaultValue(typeof(MenuItem)), value.InputGesture))
        {
            writer.WriteMember(value, value.InputGesture, "InputGesture");
        }
        writer.WriteMember(value, value.IsSelected, "IsSelected");
        if (value.ShouldIncludeProperty(MenuItem.IsSubMenuOpenProperty))
        if (!object.Equals(MenuItem.IsSubMenuOpenProperty.GetDefaultValue(typeof(MenuItem)), value.IsSubMenuOpen))
        {
            writer.WriteMember(value, value.IsSubMenuOpen, "IsSubMenuOpen");
        }
        if (value.ShouldIncludeProperty(MenuItem.StaysOpenOnClickProperty))
        if (!object.Equals(MenuItem.StaysOpenOnClickProperty.GetDefaultValue(typeof(MenuItem)), value.StaysOpenOnClick))
        {
            writer.WriteMember(value, value.StaysOpenOnClick, "StaysOpenOnClick");
        }
        writer.WriteMember(value, value.HasSubMenu, "HasSubMenu");
        writer.WriteMember(value, value.IsTopLevel, "IsTopLevel");
    }
}
