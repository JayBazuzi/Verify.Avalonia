// <auto-generated />
#nullable enable
class MaskedTextBoxConverter :
    WriteOnlyJsonConverter<MaskedTextBox>
{
    public override void Write(VerifyJsonWriter writer, MaskedTextBox value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TextBoxConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, MaskedTextBox value)
    {
        var type = typeof(MaskedTextBox);
        if (MaskedTextBox.AsciiOnlyProperty.ShouldIncludeProperty(value, value.AsciiOnly))
        {
            writer.WriteMember(value, value.AsciiOnly, "AsciiOnly");
        }
        if (MaskedTextBox.CultureProperty.ShouldIncludeProperty(value, value.Culture))
        {
            writer.WriteMember(value, value.Culture, "Culture");
        }
        if (MaskedTextBox.HidePromptOnLeaveProperty.ShouldIncludeProperty(value, value.HidePromptOnLeave))
        {
            writer.WriteMember(value, value.HidePromptOnLeave, "HidePromptOnLeave");
        }
        if (MaskedTextBox.MaskProperty.ShouldIncludeProperty(value, value.Mask))
        {
            writer.WriteMember(value, value.Mask, "Mask");
        }
        if (MaskedTextBox.MaskCompletedProperty.ShouldIncludeProperty(value, value.MaskCompleted))
        {
            writer.WriteMember(value, value.MaskCompleted, "MaskCompleted");
        }
        if (MaskedTextBox.MaskFullProperty.ShouldIncludeProperty(value, value.MaskFull))
        {
            writer.WriteMember(value, value.MaskFull, "MaskFull");
        }
        writer.WriteMember(value, value.MaskProvider, "MaskProvider");
        if (MaskedTextBox.PromptCharProperty.ShouldIncludeProperty(value, value.PromptChar))
        {
            writer.WriteMember(value, value.PromptChar, "PromptChar");
        }
        if (MaskedTextBox.ResetOnPromptProperty.ShouldIncludeProperty(value, value.ResetOnPrompt))
        {
            writer.WriteMember(value, value.ResetOnPrompt, "ResetOnPrompt");
        }
        if (MaskedTextBox.ResetOnSpaceProperty.ShouldIncludeProperty(value, value.ResetOnSpace))
        {
            writer.WriteMember(value, value.ResetOnSpace, "ResetOnSpace");
        }
    }
}
