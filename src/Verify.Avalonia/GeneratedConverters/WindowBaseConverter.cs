// <auto-generated />
#nullable enable
class WindowBaseConverter :
    WriteOnlyJsonConverter<WindowBase>,
    IAvaloniaConverter<WindowBase>
{
    public override void Write(VerifyJsonWriter writer, WindowBase value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TopLevelConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, WindowBase value)
    {
        if (value.ShouldIncludeProperty(WindowBase.IsActiveProperty))
        if (!object.Equals(WindowBase.IsActiveProperty.GetUnsetValue(typeof(WindowBase)), value.IsActive))
        {
            writer.WriteMember(value, value.IsActive, "IsActive");
        }
        writer.WriteMember(value, value.Screens, "Screens");
        if (value.ShouldIncludeProperty(WindowBase.OwnerProperty))
        if (!object.Equals(WindowBase.OwnerProperty.GetUnsetValue(typeof(WindowBase)), value.Owner))
        {
            writer.WriteMember(value, value.Owner, "Owner");
        }
        if (value.ShouldIncludeProperty(WindowBase.TopmostProperty))
        if (!object.Equals(WindowBase.TopmostProperty.GetDefaultValue(typeof(WindowBase)), value.Topmost))
        {
            writer.WriteMember(value, value.Topmost, "Topmost");
        }
        writer.WriteMember(value, value.DesktopScaling, "DesktopScaling");
    }

    public static bool MemberHasValue(WindowBase target, string member, object? value)
    {
        if (member == "IsActive")
        {
            return object.Equals(target.IsActive, value);
        }
        if (member == "Screens")
        {
            return object.Equals(target.Screens, value);
        }
        if (member == "Owner")
        {
            return object.Equals(target.Owner, value);
        }
        if (member == "Topmost")
        {
            return object.Equals(target.Topmost, value);
        }
        if (member == "DesktopScaling")
        {
            return object.Equals(target.DesktopScaling, value);
        }
        TopLevelConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
