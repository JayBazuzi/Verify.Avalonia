// <auto-generated />
#nullable enable
class WindowConverter :
    WriteOnlyJsonConverter<Window>,
    IAvaloniaConverter<Window>
{
    public override void Write(VerifyJsonWriter writer, Window value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        WindowBaseConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Window value)
    {
        writer.WriteMember(value, value.OwnedWindows, "OwnedWindows");
        if (!object.Equals(Window.SizeToContentProperty.GetDefaultValue(typeof(Window)), value.SizeToContent))
        {
            writer.WriteMember(value, value.SizeToContent, "SizeToContent");
        }
        if (!object.Equals(Window.TitleProperty.GetDefaultValue(typeof(Window)), value.Title))
        {
            writer.WriteMember(value, value.Title, "Title");
        }
        if (!object.Equals(Window.ExtendClientAreaToDecorationsHintProperty.GetDefaultValue(typeof(Window)), value.ExtendClientAreaToDecorationsHint))
        {
            writer.WriteMember(value, value.ExtendClientAreaToDecorationsHint, "ExtendClientAreaToDecorationsHint");
        }
        if (!object.Equals(Window.ExtendClientAreaChromeHintsProperty.GetDefaultValue(typeof(Window)), value.ExtendClientAreaChromeHints))
        {
            writer.WriteMember(value, value.ExtendClientAreaChromeHints, "ExtendClientAreaChromeHints");
        }
        if (!object.Equals(Window.ExtendClientAreaTitleBarHeightHintProperty.GetDefaultValue(typeof(Window)), value.ExtendClientAreaTitleBarHeightHint))
        {
            writer.WriteMember(value, value.ExtendClientAreaTitleBarHeightHint, "ExtendClientAreaTitleBarHeightHint");
        }
        if (!object.Equals(Window.IsExtendedIntoWindowDecorationsProperty.GetUnsetValue(typeof(Window)), value.IsExtendedIntoWindowDecorations))
        {
            writer.WriteMember(value, value.IsExtendedIntoWindowDecorations, "IsExtendedIntoWindowDecorations");
        }
        if (!object.Equals(Window.WindowDecorationMarginProperty.GetUnsetValue(typeof(Window)), value.WindowDecorationMargin))
        {
            writer.WriteMember(value, value.WindowDecorationMargin, "WindowDecorationMargin");
        }
        if (!object.Equals(Window.OffScreenMarginProperty.GetUnsetValue(typeof(Window)), value.OffScreenMargin))
        {
            writer.WriteMember(value, value.OffScreenMargin, "OffScreenMargin");
        }
        if (!object.Equals(Window.SystemDecorationsProperty.GetDefaultValue(typeof(Window)), value.SystemDecorations))
        {
            writer.WriteMember(value, value.SystemDecorations, "SystemDecorations");
        }
        if (!object.Equals(Window.ShowActivatedProperty.GetDefaultValue(typeof(Window)), value.ShowActivated))
        {
            writer.WriteMember(value, value.ShowActivated, "ShowActivated");
        }
        if (!object.Equals(Window.ShowInTaskbarProperty.GetDefaultValue(typeof(Window)), value.ShowInTaskbar))
        {
            writer.WriteMember(value, value.ShowInTaskbar, "ShowInTaskbar");
        }
        if (!object.Equals(Window.WindowStateProperty.GetDefaultValue(typeof(Window)), value.WindowState))
        {
            writer.WriteMember(value, value.WindowState, "WindowState");
        }
        if (!object.Equals(Window.CanResizeProperty.GetDefaultValue(typeof(Window)), value.CanResize))
        {
            writer.WriteMember(value, value.CanResize, "CanResize");
        }
        if (!object.Equals(Window.IconProperty.GetDefaultValue(typeof(Window)), value.Icon))
        {
            writer.WriteMember(value, value.Icon, "Icon");
        }
        if (!object.Equals(Window.WindowStartupLocationProperty.GetDefaultValue(typeof(Window)), value.WindowStartupLocation))
        {
            writer.WriteMember(value, value.WindowStartupLocation, "WindowStartupLocation");
        }
        writer.WriteMember(value, value.Position, "Position");
    }

    public static bool MemberHasValue(Window target, string member, object? value)
    {
        if (member == "OwnedWindows")
        {
            return object.Equals(target.OwnedWindows, value);
        }
        if (member == "SizeToContent")
        {
            return object.Equals(target.SizeToContent, value);
        }
        if (member == "Title")
        {
            return object.Equals(target.Title, value);
        }
        if (member == "ExtendClientAreaToDecorationsHint")
        {
            return object.Equals(target.ExtendClientAreaToDecorationsHint, value);
        }
        if (member == "ExtendClientAreaChromeHints")
        {
            return object.Equals(target.ExtendClientAreaChromeHints, value);
        }
        if (member == "ExtendClientAreaTitleBarHeightHint")
        {
            return object.Equals(target.ExtendClientAreaTitleBarHeightHint, value);
        }
        if (member == "IsExtendedIntoWindowDecorations")
        {
            return object.Equals(target.IsExtendedIntoWindowDecorations, value);
        }
        if (member == "WindowDecorationMargin")
        {
            return object.Equals(target.WindowDecorationMargin, value);
        }
        if (member == "OffScreenMargin")
        {
            return object.Equals(target.OffScreenMargin, value);
        }
        if (member == "SystemDecorations")
        {
            return object.Equals(target.SystemDecorations, value);
        }
        if (member == "ShowActivated")
        {
            return object.Equals(target.ShowActivated, value);
        }
        if (member == "ShowInTaskbar")
        {
            return object.Equals(target.ShowInTaskbar, value);
        }
        if (member == "WindowState")
        {
            return object.Equals(target.WindowState, value);
        }
        if (member == "CanResize")
        {
            return object.Equals(target.CanResize, value);
        }
        if (member == "Icon")
        {
            return object.Equals(target.Icon, value);
        }
        if (member == "WindowStartupLocation")
        {
            return object.Equals(target.WindowStartupLocation, value);
        }
        if (member == "Position")
        {
            return object.Equals(target.Position, value);
        }
        WindowBaseConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
