// <auto-generated />
#nullable enable
class WindowConverter :
    WriteOnlyJsonConverter<Window>
{
    public override void Write(VerifyJsonWriter writer, Window value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        WindowBaseConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Window value)
    {
        var type = typeof(Window);
        writer.WriteMember(value, value.OwnedWindows, "OwnedWindows");
        if (Window.SizeToContentProperty.ShouldIncludeProperty(value, value.SizeToContent))
        {
            writer.WriteMember(value, value.SizeToContent, "SizeToContent");
        }
        if (Window.TitleProperty.ShouldIncludeProperty(value, value.Title))
        {
            writer.WriteMember(value, value.Title, "Title");
        }
        if (Window.ExtendClientAreaToDecorationsHintProperty.ShouldIncludeProperty(value, value.ExtendClientAreaToDecorationsHint))
        {
            writer.WriteMember(value, value.ExtendClientAreaToDecorationsHint, "ExtendClientAreaToDecorationsHint");
        }
        if (Window.ExtendClientAreaChromeHintsProperty.ShouldIncludeProperty(value, value.ExtendClientAreaChromeHints))
        {
            writer.WriteMember(value, value.ExtendClientAreaChromeHints, "ExtendClientAreaChromeHints");
        }
        if (Window.ExtendClientAreaTitleBarHeightHintProperty.ShouldIncludeProperty(value, value.ExtendClientAreaTitleBarHeightHint))
        {
            writer.WriteMember(value, value.ExtendClientAreaTitleBarHeightHint, "ExtendClientAreaTitleBarHeightHint");
        }
        if (Window.IsExtendedIntoWindowDecorationsProperty.ShouldIncludeProperty(value, value.IsExtendedIntoWindowDecorations))
        {
            writer.WriteMember(value, value.IsExtendedIntoWindowDecorations, "IsExtendedIntoWindowDecorations");
        }
        if (Window.WindowDecorationMarginProperty.ShouldIncludeProperty(value, value.WindowDecorationMargin))
        {
            writer.WriteMember(value, value.WindowDecorationMargin, "WindowDecorationMargin");
        }
        if (Window.OffScreenMarginProperty.ShouldIncludeProperty(value, value.OffScreenMargin))
        {
            writer.WriteMember(value, value.OffScreenMargin, "OffScreenMargin");
        }
        if (Window.SystemDecorationsProperty.ShouldIncludeProperty(value, value.SystemDecorations))
        {
            writer.WriteMember(value, value.SystemDecorations, "SystemDecorations");
        }
        if (Window.ShowActivatedProperty.ShouldIncludeProperty(value, value.ShowActivated))
        {
            writer.WriteMember(value, value.ShowActivated, "ShowActivated");
        }
        if (Window.ShowInTaskbarProperty.ShouldIncludeProperty(value, value.ShowInTaskbar))
        {
            writer.WriteMember(value, value.ShowInTaskbar, "ShowInTaskbar");
        }
        if (Window.WindowStateProperty.ShouldIncludeProperty(value, value.WindowState))
        {
            writer.WriteMember(value, value.WindowState, "WindowState");
        }
        if (Window.CanResizeProperty.ShouldIncludeProperty(value, value.CanResize))
        {
            writer.WriteMember(value, value.CanResize, "CanResize");
        }
        if (Window.IconProperty.ShouldIncludeProperty(value, value.Icon))
        {
            writer.WriteMember(value, value.Icon, "Icon");
        }
        if (Window.WindowStartupLocationProperty.ShouldIncludeProperty(value, value.WindowStartupLocation))
        {
            writer.WriteMember(value, value.WindowStartupLocation, "WindowStartupLocation");
        }
        writer.WriteMember(value, value.Position, "Position");
    }
}
