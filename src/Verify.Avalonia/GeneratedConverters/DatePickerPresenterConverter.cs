// <auto-generated />
class DatePickerPresenterConverter :
    WriteOnlyJsonConverter<DatePickerPresenter>
{
    public override void Write(VerifyJsonWriter writer, DatePickerPresenter value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        PickerPresenterBaseConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, DatePickerPresenter value)
    {
         if (!DatePickerPresenter.DateProperty.GetDefaultValue(typeof(DatePickerPresenter)).Equals(value.Date))
         {
             writer.WriteMember(value, value.Date, "Date");
         }
         if (DatePickerPresenter.DayFormatProperty.GetDefaultValue(typeof(DatePickerPresenter)) != value.DayFormat)
         {
             writer.WriteMember(value, value.DayFormat, "DayFormat");
         }
         if (!DatePickerPresenter.DayVisibleProperty.GetDefaultValue(typeof(DatePickerPresenter)).Equals(value.DayVisible))
         {
             writer.WriteMember(value, value.DayVisible, "DayVisible");
         }
         if (!DatePickerPresenter.MaxYearProperty.GetDefaultValue(typeof(DatePickerPresenter)).Equals(value.MaxYear))
         {
             writer.WriteMember(value, value.MaxYear, "MaxYear");
         }
         if (!DatePickerPresenter.MinYearProperty.GetDefaultValue(typeof(DatePickerPresenter)).Equals(value.MinYear))
         {
             writer.WriteMember(value, value.MinYear, "MinYear");
         }
         if (DatePickerPresenter.MonthFormatProperty.GetDefaultValue(typeof(DatePickerPresenter)) != value.MonthFormat)
         {
             writer.WriteMember(value, value.MonthFormat, "MonthFormat");
         }
         if (!DatePickerPresenter.MonthVisibleProperty.GetDefaultValue(typeof(DatePickerPresenter)).Equals(value.MonthVisible))
         {
             writer.WriteMember(value, value.MonthVisible, "MonthVisible");
         }
         if (DatePickerPresenter.YearFormatProperty.GetDefaultValue(typeof(DatePickerPresenter)) != value.YearFormat)
         {
             writer.WriteMember(value, value.YearFormat, "YearFormat");
         }
         if (!DatePickerPresenter.YearVisibleProperty.GetDefaultValue(typeof(DatePickerPresenter)).Equals(value.YearVisible))
         {
             writer.WriteMember(value, value.YearVisible, "YearVisible");
         }
    }
}
