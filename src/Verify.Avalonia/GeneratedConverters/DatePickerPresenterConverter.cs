// <auto-generated />
#nullable enable
class DatePickerPresenterConverter :
    WriteOnlyJsonConverter<DatePickerPresenter>
{
    public override void Write(VerifyJsonWriter writer, DatePickerPresenter value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        PickerPresenterBaseConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, DatePickerPresenter value)
    {
        if (!object.Equals(DatePickerPresenter.DateProperty.GetDefaultValue(typeof(DatePickerPresenter)), value.Date))
        {
            writer.WriteMember(value, value.Date, "Date");
        }
        if (!object.Equals(DatePickerPresenter.DayFormatProperty.GetDefaultValue(typeof(DatePickerPresenter)), value.DayFormat))
        {
            writer.WriteMember(value, value.DayFormat, "DayFormat");
        }
        if (!object.Equals(DatePickerPresenter.DayVisibleProperty.GetDefaultValue(typeof(DatePickerPresenter)), value.DayVisible))
        {
            writer.WriteMember(value, value.DayVisible, "DayVisible");
        }
        if (!object.Equals(DatePickerPresenter.MaxYearProperty.GetDefaultValue(typeof(DatePickerPresenter)), value.MaxYear))
        {
            writer.WriteMember(value, value.MaxYear, "MaxYear");
        }
        if (!object.Equals(DatePickerPresenter.MinYearProperty.GetDefaultValue(typeof(DatePickerPresenter)), value.MinYear))
        {
            writer.WriteMember(value, value.MinYear, "MinYear");
        }
        if (!object.Equals(DatePickerPresenter.MonthFormatProperty.GetDefaultValue(typeof(DatePickerPresenter)), value.MonthFormat))
        {
            writer.WriteMember(value, value.MonthFormat, "MonthFormat");
        }
        if (!object.Equals(DatePickerPresenter.MonthVisibleProperty.GetDefaultValue(typeof(DatePickerPresenter)), value.MonthVisible))
        {
            writer.WriteMember(value, value.MonthVisible, "MonthVisible");
        }
        if (!object.Equals(DatePickerPresenter.YearFormatProperty.GetDefaultValue(typeof(DatePickerPresenter)), value.YearFormat))
        {
            writer.WriteMember(value, value.YearFormat, "YearFormat");
        }
        if (!object.Equals(DatePickerPresenter.YearVisibleProperty.GetDefaultValue(typeof(DatePickerPresenter)), value.YearVisible))
        {
            writer.WriteMember(value, value.YearVisible, "YearVisible");
        }
    }

    public static bool MemberHasValue(DatePickerPresenter target, string member, object? value)
    {
        if (member == "Date")
        {
            return object.Equals(target.Date, value);
        }
        if (member == "DayFormat")
        {
            return object.Equals(target.DayFormat, value);
        }
        if (member == "DayVisible")
        {
            return object.Equals(target.DayVisible, value);
        }
        if (member == "MaxYear")
        {
            return object.Equals(target.MaxYear, value);
        }
        if (member == "MinYear")
        {
            return object.Equals(target.MinYear, value);
        }
        if (member == "MonthFormat")
        {
            return object.Equals(target.MonthFormat, value);
        }
        if (member == "MonthVisible")
        {
            return object.Equals(target.MonthVisible, value);
        }
        if (member == "YearFormat")
        {
            return object.Equals(target.YearFormat, value);
        }
        if (member == "YearVisible")
        {
            return object.Equals(target.YearVisible, value);
        }
        throw new($"Member not found: {member}");
    }
}
