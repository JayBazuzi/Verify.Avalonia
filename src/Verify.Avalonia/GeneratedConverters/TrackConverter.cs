// <auto-generated />
#nullable enable
class TrackConverter :
    WriteOnlyJsonConverter<Track>
{
    public override void Write(VerifyJsonWriter writer, Track value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Track value)
    {
        if (Track.MinimumProperty.ShouldIncludeProperty(value, value.Minimum))
        {
            writer.WriteMember(value, value.Minimum, "Minimum");
        }
        if (Track.MaximumProperty.ShouldIncludeProperty(value, value.Maximum))
        {
            writer.WriteMember(value, value.Maximum, "Maximum");
        }
        if (Track.ValueProperty.ShouldIncludeProperty(value, value.Value))
        {
            writer.WriteMember(value, value.Value, "Value");
        }
        if (Track.ViewportSizeProperty.ShouldIncludeProperty(value, value.ViewportSize))
        {
            writer.WriteMember(value, value.ViewportSize, "ViewportSize");
        }
        if (Track.OrientationProperty.ShouldIncludeProperty(value, value.Orientation))
        {
            writer.WriteMember(value, value.Orientation, "Orientation");
        }
        if (Track.ThumbProperty.ShouldIncludeProperty(value, value.Thumb))
        {
            writer.WriteMember(value, value.Thumb, "Thumb");
        }
        if (Track.IncreaseButtonProperty.ShouldIncludeProperty(value, value.IncreaseButton))
        {
            writer.WriteMember(value, value.IncreaseButton, "IncreaseButton");
        }
        if (Track.DecreaseButtonProperty.ShouldIncludeProperty(value, value.DecreaseButton))
        {
            writer.WriteMember(value, value.DecreaseButton, "DecreaseButton");
        }
        if (Track.IsDirectionReversedProperty.ShouldIncludeProperty(value, value.IsDirectionReversed))
        {
            writer.WriteMember(value, value.IsDirectionReversed, "IsDirectionReversed");
        }
        if (Track.IgnoreThumbDragProperty.ShouldIncludeProperty(value, value.IgnoreThumbDrag))
        {
            writer.WriteMember(value, value.IgnoreThumbDrag, "IgnoreThumbDrag");
        }
    }
}
