// <auto-generated />
#nullable enable
class LayoutableConverter :
    WriteOnlyJsonConverter<Layoutable>
{
    public override void Write(VerifyJsonWriter writer, Layoutable value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        VisualConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Layoutable value)
    {
        var type = typeof(Layoutable);
        if (Layoutable.WidthProperty.ShouldIncludeProperty(value, value.Width))
        {
            writer.WriteMember(value, value.Width, "Width");
        }
        if (Layoutable.HeightProperty.ShouldIncludeProperty(value, value.Height))
        {
            writer.WriteMember(value, value.Height, "Height");
        }
        if (Layoutable.MinWidthProperty.ShouldIncludeProperty(value, value.MinWidth))
        {
            writer.WriteMember(value, value.MinWidth, "MinWidth");
        }
        if (Layoutable.MaxWidthProperty.ShouldIncludeProperty(value, value.MaxWidth))
        {
            writer.WriteMember(value, value.MaxWidth, "MaxWidth");
        }
        if (Layoutable.MinHeightProperty.ShouldIncludeProperty(value, value.MinHeight))
        {
            writer.WriteMember(value, value.MinHeight, "MinHeight");
        }
        if (Layoutable.MaxHeightProperty.ShouldIncludeProperty(value, value.MaxHeight))
        {
            writer.WriteMember(value, value.MaxHeight, "MaxHeight");
        }
        if (Layoutable.MarginProperty.ShouldIncludeProperty(value, value.Margin))
        {
            writer.WriteMember(value, value.Margin, "Margin");
        }
        if (Layoutable.HorizontalAlignmentProperty.ShouldIncludeProperty(value, value.HorizontalAlignment))
        {
            writer.WriteMember(value, value.HorizontalAlignment, "HorizontalAlignment");
        }
        if (Layoutable.VerticalAlignmentProperty.ShouldIncludeProperty(value, value.VerticalAlignment))
        {
            writer.WriteMember(value, value.VerticalAlignment, "VerticalAlignment");
        }
        if (Layoutable.DesiredSizeProperty.ShouldIncludeProperty(value, value.DesiredSize))
        {
            writer.WriteMember(value, value.DesiredSize, "DesiredSize");
        }
        writer.WriteMember(value, value.IsMeasureValid, "IsMeasureValid");
        writer.WriteMember(value, value.IsArrangeValid, "IsArrangeValid");
        if (Layoutable.UseLayoutRoundingProperty.ShouldIncludeProperty(value, value.UseLayoutRounding))
        {
            writer.WriteMember(value, value.UseLayoutRounding, "UseLayoutRounding");
        }
    }
}
