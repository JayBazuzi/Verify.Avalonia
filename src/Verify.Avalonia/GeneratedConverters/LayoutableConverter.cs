// <auto-generated />
#nullable enable
class LayoutableConverter :
    WriteOnlyJsonConverter<Layoutable>
{
    public override void Write(VerifyJsonWriter writer, Layoutable value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        VisualConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Layoutable value)
    {
        if (!object.Equals(Layoutable.WidthProperty.GetDefaultValue(typeof(Layoutable)), value.Width))
        {
            writer.WriteMember(value, value.Width, "Width");
        }
        if (!object.Equals(Layoutable.HeightProperty.GetDefaultValue(typeof(Layoutable)), value.Height))
        {
            writer.WriteMember(value, value.Height, "Height");
        }
        if (!object.Equals(Layoutable.MinWidthProperty.GetDefaultValue(typeof(Layoutable)), value.MinWidth))
        {
            writer.WriteMember(value, value.MinWidth, "MinWidth");
        }
        if (!object.Equals(Layoutable.MaxWidthProperty.GetDefaultValue(typeof(Layoutable)), value.MaxWidth))
        {
            writer.WriteMember(value, value.MaxWidth, "MaxWidth");
        }
        if (!object.Equals(Layoutable.MinHeightProperty.GetDefaultValue(typeof(Layoutable)), value.MinHeight))
        {
            writer.WriteMember(value, value.MinHeight, "MinHeight");
        }
        if (!object.Equals(Layoutable.MaxHeightProperty.GetDefaultValue(typeof(Layoutable)), value.MaxHeight))
        {
            writer.WriteMember(value, value.MaxHeight, "MaxHeight");
        }
        if (!object.Equals(Layoutable.MarginProperty.GetDefaultValue(typeof(Layoutable)), value.Margin))
        {
            writer.WriteMember(value, value.Margin, "Margin");
        }
        if (!object.Equals(Layoutable.HorizontalAlignmentProperty.GetDefaultValue(typeof(Layoutable)), value.HorizontalAlignment))
        {
            writer.WriteMember(value, value.HorizontalAlignment, "HorizontalAlignment");
        }
        if (!object.Equals(Layoutable.VerticalAlignmentProperty.GetDefaultValue(typeof(Layoutable)), value.VerticalAlignment))
        {
            writer.WriteMember(value, value.VerticalAlignment, "VerticalAlignment");
        }
        if (!object.Equals(Layoutable.DesiredSizeProperty.GetUnsetValue(typeof(Layoutable)), value.DesiredSize))
        {
            writer.WriteMember(value, value.DesiredSize, "DesiredSize");
        }
         writer.WriteMember(value, value.IsMeasureValid, "IsMeasureValid");
         writer.WriteMember(value, value.IsArrangeValid, "IsArrangeValid");
        if (!object.Equals(Layoutable.UseLayoutRoundingProperty.GetDefaultValue(typeof(Layoutable)), value.UseLayoutRounding))
        {
            writer.WriteMember(value, value.UseLayoutRounding, "UseLayoutRounding");
        }
    }

    public static bool MemberHasValue(Layoutable target, string member, object? value)
    {
        if (member == "Width")
        {
            return object.Equals(target.Width, value);
        }
        if (member == "Height")
        {
            return object.Equals(target.Height, value);
        }
        if (member == "MinWidth")
        {
            return object.Equals(target.MinWidth, value);
        }
        if (member == "MaxWidth")
        {
            return object.Equals(target.MaxWidth, value);
        }
        if (member == "MinHeight")
        {
            return object.Equals(target.MinHeight, value);
        }
        if (member == "MaxHeight")
        {
            return object.Equals(target.MaxHeight, value);
        }
        if (member == "Margin")
        {
            return object.Equals(target.Margin, value);
        }
        if (member == "HorizontalAlignment")
        {
            return object.Equals(target.HorizontalAlignment, value);
        }
        if (member == "VerticalAlignment")
        {
            return object.Equals(target.VerticalAlignment, value);
        }
        if (member == "DesiredSize")
        {
            return object.Equals(target.DesiredSize, value);
        }
        if (member == "IsMeasureValid")
        {
            return object.Equals(target.IsMeasureValid, value);
        }
        if (member == "IsArrangeValid")
        {
            return object.Equals(target.IsArrangeValid, value);
        }
        if (member == "UseLayoutRounding")
        {
            return object.Equals(target.UseLayoutRounding, value);
        }
        throw new($"Member not found: {member}");
    }
}
