// <auto-generated />
#nullable enable
class SliderConverter :
    WriteOnlyJsonConverter<Slider>
{
    public override void Write(VerifyJsonWriter writer, Slider value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        RangeBaseConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Slider value)
    {
        if (!object.Equals(Slider.TicksProperty.GetDefaultValue(typeof(Slider)), value.Ticks))
        {
            writer.WriteMember(value, value.Ticks, "Ticks");
        }
        if (!object.Equals(Slider.OrientationProperty.GetDefaultValue(typeof(Slider)), value.Orientation))
        {
            writer.WriteMember(value, value.Orientation, "Orientation");
        }
        if (!object.Equals(Slider.IsDirectionReversedProperty.GetDefaultValue(typeof(Slider)), value.IsDirectionReversed))
        {
            writer.WriteMember(value, value.IsDirectionReversed, "IsDirectionReversed");
        }
        if (!object.Equals(Slider.IsSnapToTickEnabledProperty.GetDefaultValue(typeof(Slider)), value.IsSnapToTickEnabled))
        {
            writer.WriteMember(value, value.IsSnapToTickEnabled, "IsSnapToTickEnabled");
        }
        if (!object.Equals(Slider.TickFrequencyProperty.GetDefaultValue(typeof(Slider)), value.TickFrequency))
        {
            writer.WriteMember(value, value.TickFrequency, "TickFrequency");
        }
        if (!object.Equals(Slider.TickPlacementProperty.GetDefaultValue(typeof(Slider)), value.TickPlacement))
        {
            writer.WriteMember(value, value.TickPlacement, "TickPlacement");
        }
    }

    public static bool MemberHasValue(Slider target, string member, object? value)
    {
        if (member == "Ticks")
        {
            return object.Equals(target.Ticks, value);
        }
        if (member == "Orientation")
        {
            return object.Equals(target.Orientation, value);
        }
        if (member == "IsDirectionReversed")
        {
            return object.Equals(target.IsDirectionReversed, value);
        }
        if (member == "IsSnapToTickEnabled")
        {
            return object.Equals(target.IsSnapToTickEnabled, value);
        }
        if (member == "TickFrequency")
        {
            return object.Equals(target.TickFrequency, value);
        }
        if (member == "TickPlacement")
        {
            return object.Equals(target.TickPlacement, value);
        }
        RangeBaseConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
