// <auto-generated />
#nullable enable
class TextBlockConverter :
    WriteOnlyJsonConverter<TextBlock>
{
    public override void Write(VerifyJsonWriter writer, TextBlock value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, TextBlock value)
    {
        if (value.ShouldIncludeProperty(TextBlock.PaddingProperty))
        if (!object.Equals(TextBlock.PaddingProperty.GetDefaultValue(typeof(TextBlock)), value.Padding))
        {
            writer.WriteMember(value, value.Padding, "Padding");
        }
        if (value.ShouldIncludeProperty(TextBlock.BackgroundProperty))
        if (!object.Equals(TextBlock.BackgroundProperty.GetDefaultValue(typeof(TextBlock)), value.Background))
        {
            writer.WriteMember(value, value.Background, "Background");
        }
        if (value.ShouldIncludeProperty(TextBlock.TextProperty))
        if (!object.Equals(TextBlock.TextProperty.GetDefaultValue(typeof(TextBlock)), value.Text))
        {
            writer.WriteMember(value, value.Text, "Text");
        }
        if (value.ShouldIncludeProperty(TextBlock.FontFamilyProperty))
        if (!object.Equals(TextBlock.FontFamilyProperty.GetDefaultValue(typeof(TextBlock)), value.FontFamily))
        {
            writer.WriteMember(value, value.FontFamily, "FontFamily");
        }
        if (value.ShouldIncludeProperty(TextBlock.FontSizeProperty))
        if (!object.Equals(TextBlock.FontSizeProperty.GetDefaultValue(typeof(TextBlock)), value.FontSize))
        {
            writer.WriteMember(value, value.FontSize, "FontSize");
        }
        if (value.ShouldIncludeProperty(TextBlock.FontStyleProperty))
        if (!object.Equals(TextBlock.FontStyleProperty.GetDefaultValue(typeof(TextBlock)), value.FontStyle))
        {
            writer.WriteMember(value, value.FontStyle, "FontStyle");
        }
        if (value.ShouldIncludeProperty(TextBlock.FontWeightProperty))
        if (!object.Equals(TextBlock.FontWeightProperty.GetDefaultValue(typeof(TextBlock)), value.FontWeight))
        {
            writer.WriteMember(value, value.FontWeight, "FontWeight");
        }
        if (value.ShouldIncludeProperty(TextBlock.FontStretchProperty))
        if (!object.Equals(TextBlock.FontStretchProperty.GetDefaultValue(typeof(TextBlock)), value.FontStretch))
        {
            writer.WriteMember(value, value.FontStretch, "FontStretch");
        }
        if (value.ShouldIncludeProperty(TextBlock.ForegroundProperty))
        if (!object.Equals(TextBlock.ForegroundProperty.GetDefaultValue(typeof(TextBlock)), value.Foreground))
        {
            writer.WriteMember(value, value.Foreground, "Foreground");
        }
        if (value.ShouldIncludeProperty(TextBlock.LineHeightProperty))
        if (!object.Equals(TextBlock.LineHeightProperty.GetDefaultValue(typeof(TextBlock)), value.LineHeight))
        {
            writer.WriteMember(value, value.LineHeight, "LineHeight");
        }
        if (value.ShouldIncludeProperty(TextBlock.LetterSpacingProperty))
        if (!object.Equals(TextBlock.LetterSpacingProperty.GetDefaultValue(typeof(TextBlock)), value.LetterSpacing))
        {
            writer.WriteMember(value, value.LetterSpacing, "LetterSpacing");
        }
        if (value.ShouldIncludeProperty(TextBlock.MaxLinesProperty))
        if (!object.Equals(TextBlock.MaxLinesProperty.GetDefaultValue(typeof(TextBlock)), value.MaxLines))
        {
            writer.WriteMember(value, value.MaxLines, "MaxLines");
        }
        if (value.ShouldIncludeProperty(TextBlock.TextWrappingProperty))
        if (!object.Equals(TextBlock.TextWrappingProperty.GetDefaultValue(typeof(TextBlock)), value.TextWrapping))
        {
            writer.WriteMember(value, value.TextWrapping, "TextWrapping");
        }
        if (value.ShouldIncludeProperty(TextBlock.TextTrimmingProperty))
        if (!object.Equals(TextBlock.TextTrimmingProperty.GetDefaultValue(typeof(TextBlock)), value.TextTrimming))
        {
            writer.WriteMember(value, value.TextTrimming, "TextTrimming");
        }
        if (value.ShouldIncludeProperty(TextBlock.TextAlignmentProperty))
        if (!object.Equals(TextBlock.TextAlignmentProperty.GetDefaultValue(typeof(TextBlock)), value.TextAlignment))
        {
            writer.WriteMember(value, value.TextAlignment, "TextAlignment");
        }
        if (value.ShouldIncludeProperty(TextBlock.TextDecorationsProperty))
        if (!object.Equals(TextBlock.TextDecorationsProperty.GetDefaultValue(typeof(TextBlock)), value.TextDecorations))
        {
            writer.WriteMember(value, value.TextDecorations, "TextDecorations");
        }
        if (value.ShouldIncludeProperty(TextBlock.InlinesProperty))
        if (!object.Equals(TextBlock.InlinesProperty.GetUnsetValue(typeof(TextBlock)), value.Inlines))
        {
            writer.WriteMember(value, value.Inlines, "Inlines");
        }
        if (value.ShouldIncludeProperty(TextBlock.BaselineOffsetProperty))
        if (!object.Equals(TextBlock.BaselineOffsetProperty.GetDefaultValue(typeof(TextBlock)), value.BaselineOffset))
        {
            writer.WriteMember(value, value.BaselineOffset, "BaselineOffset");
        }
    }
}
