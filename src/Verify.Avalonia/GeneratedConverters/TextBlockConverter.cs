// <auto-generated />
#nullable enable
class TextBlockConverter :
    WriteOnlyJsonConverter<TextBlock>
{
    public override void Write(VerifyJsonWriter writer, TextBlock value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, TextBlock value)
    {
         writer.WriteMember(value, value.TextLayout, "TextLayout");
        if (!object.Equals(TextBlock.PaddingProperty.GetDefaultValue(typeof(TextBlock)), value.Padding))
        {
            writer.WriteMember(value, value.Padding, "Padding");
        }
        if (!object.Equals(TextBlock.BackgroundProperty.GetDefaultValue(typeof(TextBlock)), value.Background))
        {
            writer.WriteMember(value, value.Background, "Background");
        }
        if (!object.Equals(TextBlock.TextProperty.GetDefaultValue(typeof(TextBlock)), value.Text))
        {
            writer.WriteMember(value, value.Text, "Text");
        }
        if (!object.Equals(TextBlock.FontFamilyProperty.GetDefaultValue(typeof(TextBlock)), value.FontFamily))
        {
            writer.WriteMember(value, value.FontFamily, "FontFamily");
        }
        if (!object.Equals(TextBlock.FontSizeProperty.GetDefaultValue(typeof(TextBlock)), value.FontSize))
        {
            writer.WriteMember(value, value.FontSize, "FontSize");
        }
        if (!object.Equals(TextBlock.FontStyleProperty.GetDefaultValue(typeof(TextBlock)), value.FontStyle))
        {
            writer.WriteMember(value, value.FontStyle, "FontStyle");
        }
        if (!object.Equals(TextBlock.FontWeightProperty.GetDefaultValue(typeof(TextBlock)), value.FontWeight))
        {
            writer.WriteMember(value, value.FontWeight, "FontWeight");
        }
        if (!object.Equals(TextBlock.FontStretchProperty.GetDefaultValue(typeof(TextBlock)), value.FontStretch))
        {
            writer.WriteMember(value, value.FontStretch, "FontStretch");
        }
        if (!object.Equals(TextBlock.ForegroundProperty.GetDefaultValue(typeof(TextBlock)), value.Foreground))
        {
            writer.WriteMember(value, value.Foreground, "Foreground");
        }
        if (!object.Equals(TextBlock.LineHeightProperty.GetDefaultValue(typeof(TextBlock)), value.LineHeight))
        {
            writer.WriteMember(value, value.LineHeight, "LineHeight");
        }
        if (!object.Equals(TextBlock.LetterSpacingProperty.GetDefaultValue(typeof(TextBlock)), value.LetterSpacing))
        {
            writer.WriteMember(value, value.LetterSpacing, "LetterSpacing");
        }
        if (!object.Equals(TextBlock.MaxLinesProperty.GetDefaultValue(typeof(TextBlock)), value.MaxLines))
        {
            writer.WriteMember(value, value.MaxLines, "MaxLines");
        }
        if (!object.Equals(TextBlock.TextWrappingProperty.GetDefaultValue(typeof(TextBlock)), value.TextWrapping))
        {
            writer.WriteMember(value, value.TextWrapping, "TextWrapping");
        }
        if (!object.Equals(TextBlock.TextTrimmingProperty.GetDefaultValue(typeof(TextBlock)), value.TextTrimming))
        {
            writer.WriteMember(value, value.TextTrimming, "TextTrimming");
        }
        if (!object.Equals(TextBlock.TextAlignmentProperty.GetDefaultValue(typeof(TextBlock)), value.TextAlignment))
        {
            writer.WriteMember(value, value.TextAlignment, "TextAlignment");
        }
        if (!object.Equals(TextBlock.TextDecorationsProperty.GetDefaultValue(typeof(TextBlock)), value.TextDecorations))
        {
            writer.WriteMember(value, value.TextDecorations, "TextDecorations");
        }
        if (!object.Equals(TextBlock.InlinesProperty.GetUnsetValue(typeof(TextBlock)), value.Inlines))
        {
            writer.WriteMember(value, value.Inlines, "Inlines");
        }
        if (!object.Equals(TextBlock.BaselineOffsetProperty.GetDefaultValue(typeof(TextBlock)), value.BaselineOffset))
        {
            writer.WriteMember(value, value.BaselineOffset, "BaselineOffset");
        }
    }

    public static bool MemberHasValue(TextBlock target, string member, object? value)
    {
        if (member == "TextLayout")
        {
            return object.Equals(target.TextLayout, value);
        }
        if (member == "Padding")
        {
            return object.Equals(target.Padding, value);
        }
        if (member == "Background")
        {
            return object.Equals(target.Background, value);
        }
        if (member == "Text")
        {
            return object.Equals(target.Text, value);
        }
        if (member == "FontFamily")
        {
            return object.Equals(target.FontFamily, value);
        }
        if (member == "FontSize")
        {
            return object.Equals(target.FontSize, value);
        }
        if (member == "FontStyle")
        {
            return object.Equals(target.FontStyle, value);
        }
        if (member == "FontWeight")
        {
            return object.Equals(target.FontWeight, value);
        }
        if (member == "FontStretch")
        {
            return object.Equals(target.FontStretch, value);
        }
        if (member == "Foreground")
        {
            return object.Equals(target.Foreground, value);
        }
        if (member == "LineHeight")
        {
            return object.Equals(target.LineHeight, value);
        }
        if (member == "LetterSpacing")
        {
            return object.Equals(target.LetterSpacing, value);
        }
        if (member == "MaxLines")
        {
            return object.Equals(target.MaxLines, value);
        }
        if (member == "TextWrapping")
        {
            return object.Equals(target.TextWrapping, value);
        }
        if (member == "TextTrimming")
        {
            return object.Equals(target.TextTrimming, value);
        }
        if (member == "TextAlignment")
        {
            return object.Equals(target.TextAlignment, value);
        }
        if (member == "TextDecorations")
        {
            return object.Equals(target.TextDecorations, value);
        }
        if (member == "Inlines")
        {
            return object.Equals(target.Inlines, value);
        }
        if (member == "BaselineOffset")
        {
            return object.Equals(target.BaselineOffset, value);
        }
        throw new($"Member not found: {member}");
    }
}
