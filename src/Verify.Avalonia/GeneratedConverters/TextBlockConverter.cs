// <auto-generated />
#nullable enable
class TextBlockConverter :
    WriteOnlyJsonConverter<TextBlock>
{
    public override void Write(VerifyJsonWriter writer, TextBlock value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, TextBlock value)
    {
        var type = typeof(TextBlock);
        if (TextBlock.PaddingProperty.ShouldIncludeProperty(value, value.Padding))
        {
            writer.WriteMember(value, value.Padding, "Padding");
        }
        if (TextBlock.BackgroundProperty.ShouldIncludeProperty(value, value.Background))
        {
            writer.WriteMember(value, value.Background, "Background");
        }
        if (TextBlock.TextProperty.ShouldIncludeProperty(value, value.Text))
        {
            writer.WriteMember(value, value.Text, "Text");
        }
        if (TextBlock.FontFamilyProperty.ShouldIncludeProperty(value, value.FontFamily))
        {
            writer.WriteMember(value, value.FontFamily, "FontFamily");
        }
        if (TextBlock.FontSizeProperty.ShouldIncludeProperty(value, value.FontSize))
        {
            writer.WriteMember(value, value.FontSize, "FontSize");
        }
        if (TextBlock.FontStyleProperty.ShouldIncludeProperty(value, value.FontStyle))
        {
            writer.WriteMember(value, value.FontStyle, "FontStyle");
        }
        if (TextBlock.FontWeightProperty.ShouldIncludeProperty(value, value.FontWeight))
        {
            writer.WriteMember(value, value.FontWeight, "FontWeight");
        }
        if (TextBlock.FontStretchProperty.ShouldIncludeProperty(value, value.FontStretch))
        {
            writer.WriteMember(value, value.FontStretch, "FontStretch");
        }
        if (TextBlock.ForegroundProperty.ShouldIncludeProperty(value, value.Foreground))
        {
            writer.WriteMember(value, value.Foreground, "Foreground");
        }
        if (TextBlock.LineHeightProperty.ShouldIncludeProperty(value, value.LineHeight))
        {
            writer.WriteMember(value, value.LineHeight, "LineHeight");
        }
        if (TextBlock.LetterSpacingProperty.ShouldIncludeProperty(value, value.LetterSpacing))
        {
            writer.WriteMember(value, value.LetterSpacing, "LetterSpacing");
        }
        if (TextBlock.MaxLinesProperty.ShouldIncludeProperty(value, value.MaxLines))
        {
            writer.WriteMember(value, value.MaxLines, "MaxLines");
        }
        if (TextBlock.TextWrappingProperty.ShouldIncludeProperty(value, value.TextWrapping))
        {
            writer.WriteMember(value, value.TextWrapping, "TextWrapping");
        }
        if (TextBlock.TextTrimmingProperty.ShouldIncludeProperty(value, value.TextTrimming))
        {
            writer.WriteMember(value, value.TextTrimming, "TextTrimming");
        }
        if (TextBlock.TextAlignmentProperty.ShouldIncludeProperty(value, value.TextAlignment))
        {
            writer.WriteMember(value, value.TextAlignment, "TextAlignment");
        }
        if (TextBlock.TextDecorationsProperty.ShouldIncludeProperty(value, value.TextDecorations))
        {
            writer.WriteMember(value, value.TextDecorations, "TextDecorations");
        }
        if (TextBlock.InlinesProperty.ShouldIncludeProperty(value, value.Inlines))
        {
            writer.WriteMember(value, value.Inlines, "Inlines");
        }
        if (TextBlock.BaselineOffsetProperty.ShouldIncludeProperty(value, value.BaselineOffset))
        {
            writer.WriteMember(value, value.BaselineOffset, "BaselineOffset");
        }
    }
}
