// <auto-generated />
#nullable enable
class DataGridConverter :
    WriteOnlyJsonConverter<DataGrid>
{
    public override void Write(VerifyJsonWriter writer, DataGrid value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TemplatedControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, DataGrid value)
    {
        if (!object.Equals(DataGrid.CanUserReorderColumnsProperty.GetDefaultValue(typeof(DataGrid)), value.CanUserReorderColumns))
        {
            writer.WriteMember(value, value.CanUserReorderColumns, "CanUserReorderColumns");
        }
        if (!object.Equals(DataGrid.CanUserResizeColumnsProperty.GetDefaultValue(typeof(DataGrid)), value.CanUserResizeColumns))
        {
            writer.WriteMember(value, value.CanUserResizeColumns, "CanUserResizeColumns");
        }
        if (!object.Equals(DataGrid.CanUserSortColumnsProperty.GetDefaultValue(typeof(DataGrid)), value.CanUserSortColumns))
        {
            writer.WriteMember(value, value.CanUserSortColumns, "CanUserSortColumns");
        }
        if (!object.Equals(DataGrid.ColumnHeaderHeightProperty.GetDefaultValue(typeof(DataGrid)), value.ColumnHeaderHeight))
        {
            writer.WriteMember(value, value.ColumnHeaderHeight, "ColumnHeaderHeight");
        }
        if (!object.Equals(DataGrid.RowThemeProperty.GetDefaultValue(typeof(DataGrid)), value.RowTheme))
        {
            writer.WriteMember(value, value.RowTheme, "RowTheme");
        }
        if (!object.Equals(DataGrid.CellThemeProperty.GetDefaultValue(typeof(DataGrid)), value.CellTheme))
        {
            writer.WriteMember(value, value.CellTheme, "CellTheme");
        }
        if (!object.Equals(DataGrid.ColumnHeaderThemeProperty.GetDefaultValue(typeof(DataGrid)), value.ColumnHeaderTheme))
        {
            writer.WriteMember(value, value.ColumnHeaderTheme, "ColumnHeaderTheme");
        }
        if (!object.Equals(DataGrid.RowGroupThemeProperty.GetDefaultValue(typeof(DataGrid)), value.RowGroupTheme))
        {
            writer.WriteMember(value, value.RowGroupTheme, "RowGroupTheme");
        }
        if (!object.Equals(DataGrid.ColumnWidthProperty.GetDefaultValue(typeof(DataGrid)), value.ColumnWidth))
        {
            writer.WriteMember(value, value.ColumnWidth, "ColumnWidth");
        }
        if (!object.Equals(DataGrid.FrozenColumnCountProperty.GetDefaultValue(typeof(DataGrid)), value.FrozenColumnCount))
        {
            writer.WriteMember(value, value.FrozenColumnCount, "FrozenColumnCount");
        }
        if (!object.Equals(DataGrid.GridLinesVisibilityProperty.GetDefaultValue(typeof(DataGrid)), value.GridLinesVisibility))
        {
            writer.WriteMember(value, value.GridLinesVisibility, "GridLinesVisibility");
        }
        if (!object.Equals(DataGrid.HeadersVisibilityProperty.GetDefaultValue(typeof(DataGrid)), value.HeadersVisibility))
        {
            writer.WriteMember(value, value.HeadersVisibility, "HeadersVisibility");
        }
        if (!object.Equals(DataGrid.HorizontalGridLinesBrushProperty.GetDefaultValue(typeof(DataGrid)), value.HorizontalGridLinesBrush))
        {
            writer.WriteMember(value, value.HorizontalGridLinesBrush, "HorizontalGridLinesBrush");
        }
        if (!object.Equals(DataGrid.HorizontalScrollBarVisibilityProperty.GetDefaultValue(typeof(DataGrid)), value.HorizontalScrollBarVisibility))
        {
            writer.WriteMember(value, value.HorizontalScrollBarVisibility, "HorizontalScrollBarVisibility");
        }
        if (!object.Equals(DataGrid.IsReadOnlyProperty.GetDefaultValue(typeof(DataGrid)), value.IsReadOnly))
        {
            writer.WriteMember(value, value.IsReadOnly, "IsReadOnly");
        }
        if (!object.Equals(DataGrid.AreRowGroupHeadersFrozenProperty.GetDefaultValue(typeof(DataGrid)), value.AreRowGroupHeadersFrozen))
        {
            writer.WriteMember(value, value.AreRowGroupHeadersFrozen, "AreRowGroupHeadersFrozen");
        }
        if (!object.Equals(DataGrid.IsValidProperty.GetUnsetValue(typeof(DataGrid)), value.IsValid))
        {
            writer.WriteMember(value, value.IsValid, "IsValid");
        }
        if (!object.Equals(DataGrid.MaxColumnWidthProperty.GetDefaultValue(typeof(DataGrid)), value.MaxColumnWidth))
        {
            writer.WriteMember(value, value.MaxColumnWidth, "MaxColumnWidth");
        }
        if (!object.Equals(DataGrid.MinColumnWidthProperty.GetDefaultValue(typeof(DataGrid)), value.MinColumnWidth))
        {
            writer.WriteMember(value, value.MinColumnWidth, "MinColumnWidth");
        }
        if (!object.Equals(DataGrid.RowBackgroundProperty.GetDefaultValue(typeof(DataGrid)), value.RowBackground))
        {
            writer.WriteMember(value, value.RowBackground, "RowBackground");
        }
        if (!object.Equals(DataGrid.RowHeightProperty.GetDefaultValue(typeof(DataGrid)), value.RowHeight))
        {
            writer.WriteMember(value, value.RowHeight, "RowHeight");
        }
        if (!object.Equals(DataGrid.RowHeaderWidthProperty.GetDefaultValue(typeof(DataGrid)), value.RowHeaderWidth))
        {
            writer.WriteMember(value, value.RowHeaderWidth, "RowHeaderWidth");
        }
        if (!object.Equals(DataGrid.SelectionModeProperty.GetDefaultValue(typeof(DataGrid)), value.SelectionMode))
        {
            writer.WriteMember(value, value.SelectionMode, "SelectionMode");
        }
        if (!object.Equals(DataGrid.VerticalGridLinesBrushProperty.GetDefaultValue(typeof(DataGrid)), value.VerticalGridLinesBrush))
        {
            writer.WriteMember(value, value.VerticalGridLinesBrush, "VerticalGridLinesBrush");
        }
        if (!object.Equals(DataGrid.VerticalScrollBarVisibilityProperty.GetDefaultValue(typeof(DataGrid)), value.VerticalScrollBarVisibility))
        {
            writer.WriteMember(value, value.VerticalScrollBarVisibility, "VerticalScrollBarVisibility");
        }
        if (!object.Equals(DataGrid.DropLocationIndicatorTemplateProperty.GetDefaultValue(typeof(DataGrid)), value.DropLocationIndicatorTemplate))
        {
            writer.WriteMember(value, value.DropLocationIndicatorTemplate, "DropLocationIndicatorTemplate");
        }
        if (!object.Equals(DataGrid.SelectedIndexProperty.GetUnsetValue(typeof(DataGrid)), value.SelectedIndex))
        {
            writer.WriteMember(value, value.SelectedIndex, "SelectedIndex");
        }
        if (!object.Equals(DataGrid.SelectedItemProperty.GetUnsetValue(typeof(DataGrid)), value.SelectedItem))
        {
            writer.WriteMember(value, value.SelectedItem, "SelectedItem");
        }
        if (!object.Equals(DataGrid.ClipboardCopyModeProperty.GetDefaultValue(typeof(DataGrid)), value.ClipboardCopyMode))
        {
            writer.WriteMember(value, value.ClipboardCopyMode, "ClipboardCopyMode");
        }
        if (!object.Equals(DataGrid.AutoGenerateColumnsProperty.GetDefaultValue(typeof(DataGrid)), value.AutoGenerateColumns))
        {
            writer.WriteMember(value, value.AutoGenerateColumns, "AutoGenerateColumns");
        }
        if (!object.Equals(DataGrid.ItemsSourceProperty.GetDefaultValue(typeof(DataGrid)), value.ItemsSource))
        {
            writer.WriteMember(value, value.ItemsSource, "ItemsSource");
        }
        if (!object.Equals(DataGrid.AreRowDetailsFrozenProperty.GetDefaultValue(typeof(DataGrid)), value.AreRowDetailsFrozen))
        {
            writer.WriteMember(value, value.AreRowDetailsFrozen, "AreRowDetailsFrozen");
        }
        if (!object.Equals(DataGrid.RowDetailsTemplateProperty.GetDefaultValue(typeof(DataGrid)), value.RowDetailsTemplate))
        {
            writer.WriteMember(value, value.RowDetailsTemplate, "RowDetailsTemplate");
        }
        if (!object.Equals(DataGrid.RowDetailsVisibilityModeProperty.GetDefaultValue(typeof(DataGrid)), value.RowDetailsVisibilityMode))
        {
            writer.WriteMember(value, value.RowDetailsVisibilityMode, "RowDetailsVisibilityMode");
        }
         writer.WriteMember(value, value.Columns, "Columns");
         writer.WriteMember(value, value.CurrentColumn, "CurrentColumn");
         writer.WriteMember(value, value.SelectedItems, "SelectedItems");
    }

    public static bool MemberHasValue(DataGrid target, string member, object? value)
    {
        if (member == "CanUserReorderColumns")
        {
            return object.Equals(target.CanUserReorderColumns, value);
        }
        if (member == "CanUserResizeColumns")
        {
            return object.Equals(target.CanUserResizeColumns, value);
        }
        if (member == "CanUserSortColumns")
        {
            return object.Equals(target.CanUserSortColumns, value);
        }
        if (member == "ColumnHeaderHeight")
        {
            return object.Equals(target.ColumnHeaderHeight, value);
        }
        if (member == "RowTheme")
        {
            return object.Equals(target.RowTheme, value);
        }
        if (member == "CellTheme")
        {
            return object.Equals(target.CellTheme, value);
        }
        if (member == "ColumnHeaderTheme")
        {
            return object.Equals(target.ColumnHeaderTheme, value);
        }
        if (member == "RowGroupTheme")
        {
            return object.Equals(target.RowGroupTheme, value);
        }
        if (member == "ColumnWidth")
        {
            return object.Equals(target.ColumnWidth, value);
        }
        if (member == "FrozenColumnCount")
        {
            return object.Equals(target.FrozenColumnCount, value);
        }
        if (member == "GridLinesVisibility")
        {
            return object.Equals(target.GridLinesVisibility, value);
        }
        if (member == "HeadersVisibility")
        {
            return object.Equals(target.HeadersVisibility, value);
        }
        if (member == "HorizontalGridLinesBrush")
        {
            return object.Equals(target.HorizontalGridLinesBrush, value);
        }
        if (member == "HorizontalScrollBarVisibility")
        {
            return object.Equals(target.HorizontalScrollBarVisibility, value);
        }
        if (member == "IsReadOnly")
        {
            return object.Equals(target.IsReadOnly, value);
        }
        if (member == "AreRowGroupHeadersFrozen")
        {
            return object.Equals(target.AreRowGroupHeadersFrozen, value);
        }
        if (member == "IsValid")
        {
            return object.Equals(target.IsValid, value);
        }
        if (member == "MaxColumnWidth")
        {
            return object.Equals(target.MaxColumnWidth, value);
        }
        if (member == "MinColumnWidth")
        {
            return object.Equals(target.MinColumnWidth, value);
        }
        if (member == "RowBackground")
        {
            return object.Equals(target.RowBackground, value);
        }
        if (member == "RowHeight")
        {
            return object.Equals(target.RowHeight, value);
        }
        if (member == "RowHeaderWidth")
        {
            return object.Equals(target.RowHeaderWidth, value);
        }
        if (member == "SelectionMode")
        {
            return object.Equals(target.SelectionMode, value);
        }
        if (member == "VerticalGridLinesBrush")
        {
            return object.Equals(target.VerticalGridLinesBrush, value);
        }
        if (member == "VerticalScrollBarVisibility")
        {
            return object.Equals(target.VerticalScrollBarVisibility, value);
        }
        if (member == "DropLocationIndicatorTemplate")
        {
            return object.Equals(target.DropLocationIndicatorTemplate, value);
        }
        if (member == "SelectedIndex")
        {
            return object.Equals(target.SelectedIndex, value);
        }
        if (member == "SelectedItem")
        {
            return object.Equals(target.SelectedItem, value);
        }
        if (member == "ClipboardCopyMode")
        {
            return object.Equals(target.ClipboardCopyMode, value);
        }
        if (member == "AutoGenerateColumns")
        {
            return object.Equals(target.AutoGenerateColumns, value);
        }
        if (member == "ItemsSource")
        {
            return object.Equals(target.ItemsSource, value);
        }
        if (member == "AreRowDetailsFrozen")
        {
            return object.Equals(target.AreRowDetailsFrozen, value);
        }
        if (member == "RowDetailsTemplate")
        {
            return object.Equals(target.RowDetailsTemplate, value);
        }
        if (member == "RowDetailsVisibilityMode")
        {
            return object.Equals(target.RowDetailsVisibilityMode, value);
        }
        if (member == "Columns")
        {
            return object.Equals(target.Columns, value);
        }
        if (member == "CurrentColumn")
        {
            return object.Equals(target.CurrentColumn, value);
        }
        if (member == "SelectedItems")
        {
            return object.Equals(target.SelectedItems, value);
        }
        throw new($"Member not found: {member}");
    }
}
