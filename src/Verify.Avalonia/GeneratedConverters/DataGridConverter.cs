// <auto-generated />
#nullable enable
class DataGridConverter :
    WriteOnlyJsonConverter<DataGrid>
{
    public override void Write(VerifyJsonWriter writer, DataGrid value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TemplatedControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, DataGrid value)
    {
        if (DataGrid.CanUserReorderColumnsProperty.ShouldIncludeProperty(value, value.CanUserReorderColumns))
        {
            writer.WriteMember(value, value.CanUserReorderColumns, "CanUserReorderColumns");
        }
        if (DataGrid.CanUserResizeColumnsProperty.ShouldIncludeProperty(value, value.CanUserResizeColumns))
        {
            writer.WriteMember(value, value.CanUserResizeColumns, "CanUserResizeColumns");
        }
        if (DataGrid.CanUserSortColumnsProperty.ShouldIncludeProperty(value, value.CanUserSortColumns))
        {
            writer.WriteMember(value, value.CanUserSortColumns, "CanUserSortColumns");
        }
        if (DataGrid.ColumnHeaderHeightProperty.ShouldIncludeProperty(value, value.ColumnHeaderHeight))
        {
            writer.WriteMember(value, value.ColumnHeaderHeight, "ColumnHeaderHeight");
        }
        if (DataGrid.RowThemeProperty.ShouldIncludeProperty(value, value.RowTheme))
        {
            writer.WriteMember(value, value.RowTheme, "RowTheme");
        }
        if (DataGrid.CellThemeProperty.ShouldIncludeProperty(value, value.CellTheme))
        {
            writer.WriteMember(value, value.CellTheme, "CellTheme");
        }
        if (DataGrid.ColumnHeaderThemeProperty.ShouldIncludeProperty(value, value.ColumnHeaderTheme))
        {
            writer.WriteMember(value, value.ColumnHeaderTheme, "ColumnHeaderTheme");
        }
        if (DataGrid.RowGroupThemeProperty.ShouldIncludeProperty(value, value.RowGroupTheme))
        {
            writer.WriteMember(value, value.RowGroupTheme, "RowGroupTheme");
        }
        if (DataGrid.ColumnWidthProperty.ShouldIncludeProperty(value, value.ColumnWidth))
        {
            writer.WriteMember(value, value.ColumnWidth, "ColumnWidth");
        }
        if (DataGrid.FrozenColumnCountProperty.ShouldIncludeProperty(value, value.FrozenColumnCount))
        {
            writer.WriteMember(value, value.FrozenColumnCount, "FrozenColumnCount");
        }
        if (DataGrid.GridLinesVisibilityProperty.ShouldIncludeProperty(value, value.GridLinesVisibility))
        {
            writer.WriteMember(value, value.GridLinesVisibility, "GridLinesVisibility");
        }
        if (DataGrid.HeadersVisibilityProperty.ShouldIncludeProperty(value, value.HeadersVisibility))
        {
            writer.WriteMember(value, value.HeadersVisibility, "HeadersVisibility");
        }
        if (DataGrid.HorizontalGridLinesBrushProperty.ShouldIncludeProperty(value, value.HorizontalGridLinesBrush))
        {
            writer.WriteMember(value, value.HorizontalGridLinesBrush, "HorizontalGridLinesBrush");
        }
        if (DataGrid.HorizontalScrollBarVisibilityProperty.ShouldIncludeProperty(value, value.HorizontalScrollBarVisibility))
        {
            writer.WriteMember(value, value.HorizontalScrollBarVisibility, "HorizontalScrollBarVisibility");
        }
        if (DataGrid.IsReadOnlyProperty.ShouldIncludeProperty(value, value.IsReadOnly))
        {
            writer.WriteMember(value, value.IsReadOnly, "IsReadOnly");
        }
        if (DataGrid.AreRowGroupHeadersFrozenProperty.ShouldIncludeProperty(value, value.AreRowGroupHeadersFrozen))
        {
            writer.WriteMember(value, value.AreRowGroupHeadersFrozen, "AreRowGroupHeadersFrozen");
        }
        if (DataGrid.IsValidProperty.ShouldIncludeProperty(value, value.IsValid))
        {
            writer.WriteMember(value, value.IsValid, "IsValid");
        }
        if (DataGrid.MaxColumnWidthProperty.ShouldIncludeProperty(value, value.MaxColumnWidth))
        {
            writer.WriteMember(value, value.MaxColumnWidth, "MaxColumnWidth");
        }
        if (DataGrid.MinColumnWidthProperty.ShouldIncludeProperty(value, value.MinColumnWidth))
        {
            writer.WriteMember(value, value.MinColumnWidth, "MinColumnWidth");
        }
        if (DataGrid.RowBackgroundProperty.ShouldIncludeProperty(value, value.RowBackground))
        {
            writer.WriteMember(value, value.RowBackground, "RowBackground");
        }
        if (DataGrid.RowHeightProperty.ShouldIncludeProperty(value, value.RowHeight))
        {
            writer.WriteMember(value, value.RowHeight, "RowHeight");
        }
        if (DataGrid.RowHeaderWidthProperty.ShouldIncludeProperty(value, value.RowHeaderWidth))
        {
            writer.WriteMember(value, value.RowHeaderWidth, "RowHeaderWidth");
        }
        if (DataGrid.SelectionModeProperty.ShouldIncludeProperty(value, value.SelectionMode))
        {
            writer.WriteMember(value, value.SelectionMode, "SelectionMode");
        }
        if (DataGrid.VerticalGridLinesBrushProperty.ShouldIncludeProperty(value, value.VerticalGridLinesBrush))
        {
            writer.WriteMember(value, value.VerticalGridLinesBrush, "VerticalGridLinesBrush");
        }
        if (DataGrid.VerticalScrollBarVisibilityProperty.ShouldIncludeProperty(value, value.VerticalScrollBarVisibility))
        {
            writer.WriteMember(value, value.VerticalScrollBarVisibility, "VerticalScrollBarVisibility");
        }
        if (DataGrid.DropLocationIndicatorTemplateProperty.ShouldIncludeProperty(value, value.DropLocationIndicatorTemplate))
        {
            writer.WriteMember(value, value.DropLocationIndicatorTemplate, "DropLocationIndicatorTemplate");
        }
        if (DataGrid.SelectedIndexProperty.ShouldIncludeProperty(value, value.SelectedIndex))
        {
            writer.WriteMember(value, value.SelectedIndex, "SelectedIndex");
        }
        if (DataGrid.SelectedItemProperty.ShouldIncludeProperty(value, value.SelectedItem))
        {
            writer.WriteMember(value, value.SelectedItem, "SelectedItem");
        }
        if (DataGrid.ClipboardCopyModeProperty.ShouldIncludeProperty(value, value.ClipboardCopyMode))
        {
            writer.WriteMember(value, value.ClipboardCopyMode, "ClipboardCopyMode");
        }
        if (DataGrid.AutoGenerateColumnsProperty.ShouldIncludeProperty(value, value.AutoGenerateColumns))
        {
            writer.WriteMember(value, value.AutoGenerateColumns, "AutoGenerateColumns");
        }
        if (DataGrid.ItemsSourceProperty.ShouldIncludeProperty(value, value.ItemsSource))
        {
            writer.WriteMember(value, value.ItemsSource, "ItemsSource");
        }
        if (DataGrid.AreRowDetailsFrozenProperty.ShouldIncludeProperty(value, value.AreRowDetailsFrozen))
        {
            writer.WriteMember(value, value.AreRowDetailsFrozen, "AreRowDetailsFrozen");
        }
        if (DataGrid.RowDetailsTemplateProperty.ShouldIncludeProperty(value, value.RowDetailsTemplate))
        {
            writer.WriteMember(value, value.RowDetailsTemplate, "RowDetailsTemplate");
        }
        if (DataGrid.RowDetailsVisibilityModeProperty.ShouldIncludeProperty(value, value.RowDetailsVisibilityMode))
        {
            writer.WriteMember(value, value.RowDetailsVisibilityMode, "RowDetailsVisibilityMode");
        }
        writer.WriteMember(value, value.Columns, "Columns");
        writer.WriteMember(value, value.CurrentColumn, "CurrentColumn");
        writer.WriteMember(value, value.SelectedItems, "SelectedItems");
    }
}
