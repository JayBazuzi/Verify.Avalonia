// <auto-generated />
#nullable enable
class DatePickerConverter :
    WriteOnlyJsonConverter<DatePicker>
{
    public override void Write(VerifyJsonWriter writer, DatePicker value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TemplatedControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, DatePicker value)
    {
        var type = typeof(DatePicker);
        if (DatePicker.DayFormatProperty.ShouldIncludeProperty(value, value.DayFormat))
        {
            writer.WriteMember(value, value.DayFormat, "DayFormat");
        }
        if (DatePicker.DayVisibleProperty.ShouldIncludeProperty(value, value.DayVisible))
        {
            writer.WriteMember(value, value.DayVisible, "DayVisible");
        }
        if (DatePicker.MaxYearProperty.ShouldIncludeProperty(value, value.MaxYear))
        {
            writer.WriteMember(value, value.MaxYear, "MaxYear");
        }
        if (DatePicker.MinYearProperty.ShouldIncludeProperty(value, value.MinYear))
        {
            writer.WriteMember(value, value.MinYear, "MinYear");
        }
        if (DatePicker.MonthFormatProperty.ShouldIncludeProperty(value, value.MonthFormat))
        {
            writer.WriteMember(value, value.MonthFormat, "MonthFormat");
        }
        if (DatePicker.MonthVisibleProperty.ShouldIncludeProperty(value, value.MonthVisible))
        {
            writer.WriteMember(value, value.MonthVisible, "MonthVisible");
        }
        if (DatePicker.YearFormatProperty.ShouldIncludeProperty(value, value.YearFormat))
        {
            writer.WriteMember(value, value.YearFormat, "YearFormat");
        }
        if (DatePicker.YearVisibleProperty.ShouldIncludeProperty(value, value.YearVisible))
        {
            writer.WriteMember(value, value.YearVisible, "YearVisible");
        }
        if (DatePicker.SelectedDateProperty.ShouldIncludeProperty(value, value.SelectedDate))
        {
            writer.WriteMember(value, value.SelectedDate, "SelectedDate");
        }
    }
}
