// <auto-generated />
#nullable enable
class NumericUpDownConverter :
    WriteOnlyJsonConverter<NumericUpDown>
{
    public override void Write(VerifyJsonWriter writer, NumericUpDown value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TemplatedControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, NumericUpDown value)
    {
        if (!object.Equals(NumericUpDown.AllowSpinProperty.GetDefaultValue(typeof(NumericUpDown)), value.AllowSpin))
        {
            writer.WriteMember(value, value.AllowSpin, "AllowSpin");
        }
        if (!object.Equals(NumericUpDown.ButtonSpinnerLocationProperty.GetDefaultValue(typeof(NumericUpDown)), value.ButtonSpinnerLocation))
        {
            writer.WriteMember(value, value.ButtonSpinnerLocation, "ButtonSpinnerLocation");
        }
        if (!object.Equals(NumericUpDown.ShowButtonSpinnerProperty.GetDefaultValue(typeof(NumericUpDown)), value.ShowButtonSpinner))
        {
            writer.WriteMember(value, value.ShowButtonSpinner, "ShowButtonSpinner");
        }
        if (!object.Equals(NumericUpDown.ClipValueToMinMaxProperty.GetDefaultValue(typeof(NumericUpDown)), value.ClipValueToMinMax))
        {
            writer.WriteMember(value, value.ClipValueToMinMax, "ClipValueToMinMax");
        }
        if (!object.Equals(NumericUpDown.NumberFormatProperty.GetDefaultValue(typeof(NumericUpDown)), value.NumberFormat))
        {
            writer.WriteMember(value, value.NumberFormat, "NumberFormat");
        }
        if (!object.Equals(NumericUpDown.FormatStringProperty.GetDefaultValue(typeof(NumericUpDown)), value.FormatString))
        {
            writer.WriteMember(value, value.FormatString, "FormatString");
        }
        if (!object.Equals(NumericUpDown.IncrementProperty.GetDefaultValue(typeof(NumericUpDown)), value.Increment))
        {
            writer.WriteMember(value, value.Increment, "Increment");
        }
        if (!object.Equals(NumericUpDown.IsReadOnlyProperty.GetDefaultValue(typeof(NumericUpDown)), value.IsReadOnly))
        {
            writer.WriteMember(value, value.IsReadOnly, "IsReadOnly");
        }
        if (!object.Equals(NumericUpDown.MaximumProperty.GetDefaultValue(typeof(NumericUpDown)), value.Maximum))
        {
            writer.WriteMember(value, value.Maximum, "Maximum");
        }
        if (!object.Equals(NumericUpDown.MinimumProperty.GetDefaultValue(typeof(NumericUpDown)), value.Minimum))
        {
            writer.WriteMember(value, value.Minimum, "Minimum");
        }
        if (!object.Equals(NumericUpDown.ParsingNumberStyleProperty.GetDefaultValue(typeof(NumericUpDown)), value.ParsingNumberStyle))
        {
            writer.WriteMember(value, value.ParsingNumberStyle, "ParsingNumberStyle");
        }
        if (!object.Equals(NumericUpDown.TextProperty.GetDefaultValue(typeof(NumericUpDown)), value.Text))
        {
            writer.WriteMember(value, value.Text, "Text");
        }
        if (!object.Equals(NumericUpDown.TextConverterProperty.GetDefaultValue(typeof(NumericUpDown)), value.TextConverter))
        {
            writer.WriteMember(value, value.TextConverter, "TextConverter");
        }
        if (!object.Equals(NumericUpDown.ValueProperty.GetDefaultValue(typeof(NumericUpDown)), value.Value))
        {
            writer.WriteMember(value, value.Value, "Value");
        }
        if (!object.Equals(NumericUpDown.WatermarkProperty.GetDefaultValue(typeof(NumericUpDown)), value.Watermark))
        {
            writer.WriteMember(value, value.Watermark, "Watermark");
        }
        if (!object.Equals(NumericUpDown.HorizontalContentAlignmentProperty.GetDefaultValue(typeof(NumericUpDown)), value.HorizontalContentAlignment))
        {
            writer.WriteMember(value, value.HorizontalContentAlignment, "HorizontalContentAlignment");
        }
        if (!object.Equals(NumericUpDown.VerticalContentAlignmentProperty.GetDefaultValue(typeof(NumericUpDown)), value.VerticalContentAlignment))
        {
            writer.WriteMember(value, value.VerticalContentAlignment, "VerticalContentAlignment");
        }
        if (!object.Equals(NumericUpDown.TextAlignmentProperty.GetDefaultValue(typeof(NumericUpDown)), value.TextAlignment))
        {
            writer.WriteMember(value, value.TextAlignment, "TextAlignment");
        }
    }

    public static bool MemberHasValue(NumericUpDown target, string member, object? value)
    {
        if (member == "AllowSpin")
        {
            return object.Equals(target.AllowSpin, value);
        }
        if (member == "ButtonSpinnerLocation")
        {
            return object.Equals(target.ButtonSpinnerLocation, value);
        }
        if (member == "ShowButtonSpinner")
        {
            return object.Equals(target.ShowButtonSpinner, value);
        }
        if (member == "ClipValueToMinMax")
        {
            return object.Equals(target.ClipValueToMinMax, value);
        }
        if (member == "NumberFormat")
        {
            return object.Equals(target.NumberFormat, value);
        }
        if (member == "FormatString")
        {
            return object.Equals(target.FormatString, value);
        }
        if (member == "Increment")
        {
            return object.Equals(target.Increment, value);
        }
        if (member == "IsReadOnly")
        {
            return object.Equals(target.IsReadOnly, value);
        }
        if (member == "Maximum")
        {
            return object.Equals(target.Maximum, value);
        }
        if (member == "Minimum")
        {
            return object.Equals(target.Minimum, value);
        }
        if (member == "ParsingNumberStyle")
        {
            return object.Equals(target.ParsingNumberStyle, value);
        }
        if (member == "Text")
        {
            return object.Equals(target.Text, value);
        }
        if (member == "TextConverter")
        {
            return object.Equals(target.TextConverter, value);
        }
        if (member == "Value")
        {
            return object.Equals(target.Value, value);
        }
        if (member == "Watermark")
        {
            return object.Equals(target.Watermark, value);
        }
        if (member == "HorizontalContentAlignment")
        {
            return object.Equals(target.HorizontalContentAlignment, value);
        }
        if (member == "VerticalContentAlignment")
        {
            return object.Equals(target.VerticalContentAlignment, value);
        }
        if (member == "TextAlignment")
        {
            return object.Equals(target.TextAlignment, value);
        }
        TemplatedControlConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
