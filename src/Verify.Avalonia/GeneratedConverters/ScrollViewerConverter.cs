// <auto-generated />
#nullable enable
class ScrollViewerConverter :
    WriteOnlyJsonConverter<ScrollViewer>
{
    public override void Write(VerifyJsonWriter writer, ScrollViewer value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ContentControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, ScrollViewer value)
    {
        var type = typeof(ScrollViewer);
        if (ScrollViewer.BringIntoViewOnFocusChangeProperty.ShouldIncludeProperty(value, value.BringIntoViewOnFocusChange))
        {
            writer.WriteMember(value, value.BringIntoViewOnFocusChange, "BringIntoViewOnFocusChange");
        }
        if (ScrollViewer.ExtentProperty.ShouldIncludeProperty(value, value.Extent))
        {
            writer.WriteMember(value, value.Extent, "Extent");
        }
        if (ScrollViewer.OffsetProperty.ShouldIncludeProperty(value, value.Offset))
        {
            writer.WriteMember(value, value.Offset, "Offset");
        }
        if (ScrollViewer.ViewportProperty.ShouldIncludeProperty(value, value.Viewport))
        {
            writer.WriteMember(value, value.Viewport, "Viewport");
        }
        if (ScrollViewer.LargeChangeProperty.ShouldIncludeProperty(value, value.LargeChange))
        {
            writer.WriteMember(value, value.LargeChange, "LargeChange");
        }
        if (ScrollViewer.SmallChangeProperty.ShouldIncludeProperty(value, value.SmallChange))
        {
            writer.WriteMember(value, value.SmallChange, "SmallChange");
        }
        if (ScrollViewer.HorizontalScrollBarVisibilityProperty.ShouldIncludeProperty(value, value.HorizontalScrollBarVisibility))
        {
            writer.WriteMember(value, value.HorizontalScrollBarVisibility, "HorizontalScrollBarVisibility");
        }
        if (ScrollViewer.VerticalScrollBarVisibilityProperty.ShouldIncludeProperty(value, value.VerticalScrollBarVisibility))
        {
            writer.WriteMember(value, value.VerticalScrollBarVisibility, "VerticalScrollBarVisibility");
        }
        writer.WriteMember(value, value.CurrentAnchor, "CurrentAnchor");
        if (ScrollViewer.ScrollBarMaximumProperty.ShouldIncludeProperty(value, value.ScrollBarMaximum))
        {
            writer.WriteMember(value, value.ScrollBarMaximum, "ScrollBarMaximum");
        }
        if (ScrollViewer.IsExpandedProperty.ShouldIncludeProperty(value, value.IsExpanded))
        {
            writer.WriteMember(value, value.IsExpanded, "IsExpanded");
        }
        if (ScrollViewer.HorizontalSnapPointsTypeProperty.ShouldIncludeProperty(value, value.HorizontalSnapPointsType))
        {
            writer.WriteMember(value, value.HorizontalSnapPointsType, "HorizontalSnapPointsType");
        }
        if (ScrollViewer.VerticalSnapPointsTypeProperty.ShouldIncludeProperty(value, value.VerticalSnapPointsType))
        {
            writer.WriteMember(value, value.VerticalSnapPointsType, "VerticalSnapPointsType");
        }
        if (ScrollViewer.HorizontalSnapPointsAlignmentProperty.ShouldIncludeProperty(value, value.HorizontalSnapPointsAlignment))
        {
            writer.WriteMember(value, value.HorizontalSnapPointsAlignment, "HorizontalSnapPointsAlignment");
        }
        if (ScrollViewer.VerticalSnapPointsAlignmentProperty.ShouldIncludeProperty(value, value.VerticalSnapPointsAlignment))
        {
            writer.WriteMember(value, value.VerticalSnapPointsAlignment, "VerticalSnapPointsAlignment");
        }
        if (ScrollViewer.AllowAutoHideProperty.ShouldIncludeProperty(value, value.AllowAutoHide))
        {
            writer.WriteMember(value, value.AllowAutoHide, "AllowAutoHide");
        }
        if (ScrollViewer.IsScrollChainingEnabledProperty.ShouldIncludeProperty(value, value.IsScrollChainingEnabled))
        {
            writer.WriteMember(value, value.IsScrollChainingEnabled, "IsScrollChainingEnabled");
        }
        if (ScrollViewer.IsScrollInertiaEnabledProperty.ShouldIncludeProperty(value, value.IsScrollInertiaEnabled))
        {
            writer.WriteMember(value, value.IsScrollInertiaEnabled, "IsScrollInertiaEnabled");
        }
    }
}
