// <auto-generated />
#nullable enable
class DataGridRowGroupHeaderConverter :
    WriteOnlyJsonConverter<DataGridRowGroupHeader>
{
    public override void Write(VerifyJsonWriter writer, DataGridRowGroupHeader value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TemplatedControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, DataGridRowGroupHeader value)
    {
        if (!object.Equals(DataGridRowGroupHeader.IsItemCountVisibleProperty.GetDefaultValue(typeof(DataGridRowGroupHeader)), value.IsItemCountVisible))
        {
            writer.WriteMember(value, value.IsItemCountVisible, "IsItemCountVisible");
        }
        if (!object.Equals(DataGridRowGroupHeader.PropertyNameProperty.GetDefaultValue(typeof(DataGridRowGroupHeader)), value.PropertyName))
        {
            writer.WriteMember(value, value.PropertyName, "PropertyName");
        }
        if (!object.Equals(DataGridRowGroupHeader.IsPropertyNameVisibleProperty.GetDefaultValue(typeof(DataGridRowGroupHeader)), value.IsPropertyNameVisible))
        {
            writer.WriteMember(value, value.IsPropertyNameVisible, "IsPropertyNameVisible");
        }
        if (!object.Equals(DataGridRowGroupHeader.SublevelIndentProperty.GetDefaultValue(typeof(DataGridRowGroupHeader)), value.SublevelIndent))
        {
            writer.WriteMember(value, value.SublevelIndent, "SublevelIndent");
        }
    }

    public static bool MemberHasValue(DataGridRowGroupHeader target, string member, object? value)
    {
        if (member == "IsItemCountVisible")
        {
            return object.Equals(target.IsItemCountVisible, value);
        }
        if (member == "PropertyName")
        {
            return object.Equals(target.PropertyName, value);
        }
        if (member == "IsPropertyNameVisible")
        {
            return object.Equals(target.IsPropertyNameVisible, value);
        }
        if (member == "SublevelIndent")
        {
            return object.Equals(target.SublevelIndent, value);
        }
        throw new($"Member not found: {member}");
    }
}
