// <auto-generated />
#nullable enable
class TextBoxConverter :
    WriteOnlyJsonConverter<TextBox>
{
    public override void Write(VerifyJsonWriter writer, TextBox value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TemplatedControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, TextBox value)
    {
        if (TextBox.AcceptsReturnProperty.ShouldIncludeProperty(value, value.AcceptsReturn))
        {
            writer.WriteMember(value, value.AcceptsReturn, "AcceptsReturn");
        }
        if (TextBox.AcceptsTabProperty.ShouldIncludeProperty(value, value.AcceptsTab))
        {
            writer.WriteMember(value, value.AcceptsTab, "AcceptsTab");
        }
        if (TextBox.CaretIndexProperty.ShouldIncludeProperty(value, value.CaretIndex))
        {
            writer.WriteMember(value, value.CaretIndex, "CaretIndex");
        }
        if (TextBox.IsReadOnlyProperty.ShouldIncludeProperty(value, value.IsReadOnly))
        {
            writer.WriteMember(value, value.IsReadOnly, "IsReadOnly");
        }
        if (TextBox.PasswordCharProperty.ShouldIncludeProperty(value, value.PasswordChar))
        {
            writer.WriteMember(value, value.PasswordChar, "PasswordChar");
        }
        if (TextBox.SelectionBrushProperty.ShouldIncludeProperty(value, value.SelectionBrush))
        {
            writer.WriteMember(value, value.SelectionBrush, "SelectionBrush");
        }
        if (TextBox.SelectionForegroundBrushProperty.ShouldIncludeProperty(value, value.SelectionForegroundBrush))
        {
            writer.WriteMember(value, value.SelectionForegroundBrush, "SelectionForegroundBrush");
        }
        if (TextBox.CaretBrushProperty.ShouldIncludeProperty(value, value.CaretBrush))
        {
            writer.WriteMember(value, value.CaretBrush, "CaretBrush");
        }
        if (TextBox.SelectionStartProperty.ShouldIncludeProperty(value, value.SelectionStart))
        {
            writer.WriteMember(value, value.SelectionStart, "SelectionStart");
        }
        if (TextBox.SelectionEndProperty.ShouldIncludeProperty(value, value.SelectionEnd))
        {
            writer.WriteMember(value, value.SelectionEnd, "SelectionEnd");
        }
        if (TextBox.MaxLengthProperty.ShouldIncludeProperty(value, value.MaxLength))
        {
            writer.WriteMember(value, value.MaxLength, "MaxLength");
        }
        if (TextBox.MaxLinesProperty.ShouldIncludeProperty(value, value.MaxLines))
        {
            writer.WriteMember(value, value.MaxLines, "MaxLines");
        }
        if (TextBox.LetterSpacingProperty.ShouldIncludeProperty(value, value.LetterSpacing))
        {
            writer.WriteMember(value, value.LetterSpacing, "LetterSpacing");
        }
        if (TextBox.LineHeightProperty.ShouldIncludeProperty(value, value.LineHeight))
        {
            writer.WriteMember(value, value.LineHeight, "LineHeight");
        }
        if (TextBox.TextProperty.ShouldIncludeProperty(value, value.Text))
        {
            writer.WriteMember(value, value.Text, "Text");
        }
        writer.WriteMember(value, value.SelectedText, "SelectedText");
        if (TextBox.HorizontalContentAlignmentProperty.ShouldIncludeProperty(value, value.HorizontalContentAlignment))
        {
            writer.WriteMember(value, value.HorizontalContentAlignment, "HorizontalContentAlignment");
        }
        if (TextBox.VerticalContentAlignmentProperty.ShouldIncludeProperty(value, value.VerticalContentAlignment))
        {
            writer.WriteMember(value, value.VerticalContentAlignment, "VerticalContentAlignment");
        }
        if (TextBox.TextAlignmentProperty.ShouldIncludeProperty(value, value.TextAlignment))
        {
            writer.WriteMember(value, value.TextAlignment, "TextAlignment");
        }
        if (TextBox.WatermarkProperty.ShouldIncludeProperty(value, value.Watermark))
        {
            writer.WriteMember(value, value.Watermark, "Watermark");
        }
        if (TextBox.UseFloatingWatermarkProperty.ShouldIncludeProperty(value, value.UseFloatingWatermark))
        {
            writer.WriteMember(value, value.UseFloatingWatermark, "UseFloatingWatermark");
        }
        if (TextBox.InnerLeftContentProperty.ShouldIncludeProperty(value, value.InnerLeftContent))
        {
            writer.WriteMember(value, value.InnerLeftContent, "InnerLeftContent");
        }
        if (TextBox.InnerRightContentProperty.ShouldIncludeProperty(value, value.InnerRightContent))
        {
            writer.WriteMember(value, value.InnerRightContent, "InnerRightContent");
        }
        if (TextBox.RevealPasswordProperty.ShouldIncludeProperty(value, value.RevealPassword))
        {
            writer.WriteMember(value, value.RevealPassword, "RevealPassword");
        }
        if (TextBox.TextWrappingProperty.ShouldIncludeProperty(value, value.TextWrapping))
        {
            writer.WriteMember(value, value.TextWrapping, "TextWrapping");
        }
        if (TextBox.NewLineProperty.ShouldIncludeProperty(value, value.NewLine))
        {
            writer.WriteMember(value, value.NewLine, "NewLine");
        }
        if (TextBox.CanCutProperty.ShouldIncludeProperty(value, value.CanCut))
        {
            writer.WriteMember(value, value.CanCut, "CanCut");
        }
        if (TextBox.CanCopyProperty.ShouldIncludeProperty(value, value.CanCopy))
        {
            writer.WriteMember(value, value.CanCopy, "CanCopy");
        }
        if (TextBox.CanPasteProperty.ShouldIncludeProperty(value, value.CanPaste))
        {
            writer.WriteMember(value, value.CanPaste, "CanPaste");
        }
        if (TextBox.IsUndoEnabledProperty.ShouldIncludeProperty(value, value.IsUndoEnabled))
        {
            writer.WriteMember(value, value.IsUndoEnabled, "IsUndoEnabled");
        }
        if (TextBox.UndoLimitProperty.ShouldIncludeProperty(value, value.UndoLimit))
        {
            writer.WriteMember(value, value.UndoLimit, "UndoLimit");
        }
        if (TextBox.CanUndoProperty.ShouldIncludeProperty(value, value.CanUndo))
        {
            writer.WriteMember(value, value.CanUndo, "CanUndo");
        }
        if (TextBox.CanRedoProperty.ShouldIncludeProperty(value, value.CanRedo))
        {
            writer.WriteMember(value, value.CanRedo, "CanRedo");
        }
    }
}
