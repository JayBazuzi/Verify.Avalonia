// <auto-generated />
#nullable enable
class TextBoxConverter :
    WriteOnlyJsonConverter<TextBox>,
    IAvaloniaConverter<TextBox>
{
    public override void Write(VerifyJsonWriter writer, TextBox value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TemplatedControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, TextBox value)
    {
        if (!object.Equals(TextBox.AcceptsReturnProperty.GetDefaultValue(typeof(TextBox)), value.AcceptsReturn))
        {
            writer.WriteMember(value, value.AcceptsReturn, "AcceptsReturn");
        }
        if (!object.Equals(TextBox.AcceptsTabProperty.GetDefaultValue(typeof(TextBox)), value.AcceptsTab))
        {
            writer.WriteMember(value, value.AcceptsTab, "AcceptsTab");
        }
        if (!object.Equals(TextBox.CaretIndexProperty.GetDefaultValue(typeof(TextBox)), value.CaretIndex))
        {
            writer.WriteMember(value, value.CaretIndex, "CaretIndex");
        }
        if (!object.Equals(TextBox.IsReadOnlyProperty.GetDefaultValue(typeof(TextBox)), value.IsReadOnly))
        {
            writer.WriteMember(value, value.IsReadOnly, "IsReadOnly");
        }
        if (!object.Equals(TextBox.PasswordCharProperty.GetDefaultValue(typeof(TextBox)), value.PasswordChar))
        {
            writer.WriteMember(value, value.PasswordChar, "PasswordChar");
        }
        if (!object.Equals(TextBox.SelectionBrushProperty.GetDefaultValue(typeof(TextBox)), value.SelectionBrush))
        {
            writer.WriteMember(value, value.SelectionBrush, "SelectionBrush");
        }
        if (!object.Equals(TextBox.SelectionForegroundBrushProperty.GetDefaultValue(typeof(TextBox)), value.SelectionForegroundBrush))
        {
            writer.WriteMember(value, value.SelectionForegroundBrush, "SelectionForegroundBrush");
        }
        if (!object.Equals(TextBox.CaretBrushProperty.GetDefaultValue(typeof(TextBox)), value.CaretBrush))
        {
            writer.WriteMember(value, value.CaretBrush, "CaretBrush");
        }
        if (!object.Equals(TextBox.SelectionStartProperty.GetDefaultValue(typeof(TextBox)), value.SelectionStart))
        {
            writer.WriteMember(value, value.SelectionStart, "SelectionStart");
        }
        if (!object.Equals(TextBox.SelectionEndProperty.GetDefaultValue(typeof(TextBox)), value.SelectionEnd))
        {
            writer.WriteMember(value, value.SelectionEnd, "SelectionEnd");
        }
        if (!object.Equals(TextBox.MaxLengthProperty.GetDefaultValue(typeof(TextBox)), value.MaxLength))
        {
            writer.WriteMember(value, value.MaxLength, "MaxLength");
        }
        if (!object.Equals(TextBox.MaxLinesProperty.GetDefaultValue(typeof(TextBox)), value.MaxLines))
        {
            writer.WriteMember(value, value.MaxLines, "MaxLines");
        }
        if (!object.Equals(TextBox.LetterSpacingProperty.GetDefaultValue(typeof(TextBox)), value.LetterSpacing))
        {
            writer.WriteMember(value, value.LetterSpacing, "LetterSpacing");
        }
        if (!object.Equals(TextBox.LineHeightProperty.GetDefaultValue(typeof(TextBox)), value.LineHeight))
        {
            writer.WriteMember(value, value.LineHeight, "LineHeight");
        }
        if (!object.Equals(TextBox.TextProperty.GetDefaultValue(typeof(TextBox)), value.Text))
        {
            writer.WriteMember(value, value.Text, "Text");
        }
         writer.WriteMember(value, value.SelectedText, "SelectedText");
        if (!object.Equals(TextBox.HorizontalContentAlignmentProperty.GetDefaultValue(typeof(TextBox)), value.HorizontalContentAlignment))
        {
            writer.WriteMember(value, value.HorizontalContentAlignment, "HorizontalContentAlignment");
        }
        if (!object.Equals(TextBox.VerticalContentAlignmentProperty.GetDefaultValue(typeof(TextBox)), value.VerticalContentAlignment))
        {
            writer.WriteMember(value, value.VerticalContentAlignment, "VerticalContentAlignment");
        }
        if (!object.Equals(TextBox.TextAlignmentProperty.GetDefaultValue(typeof(TextBox)), value.TextAlignment))
        {
            writer.WriteMember(value, value.TextAlignment, "TextAlignment");
        }
        if (!object.Equals(TextBox.WatermarkProperty.GetDefaultValue(typeof(TextBox)), value.Watermark))
        {
            writer.WriteMember(value, value.Watermark, "Watermark");
        }
        if (!object.Equals(TextBox.UseFloatingWatermarkProperty.GetDefaultValue(typeof(TextBox)), value.UseFloatingWatermark))
        {
            writer.WriteMember(value, value.UseFloatingWatermark, "UseFloatingWatermark");
        }
        if (!object.Equals(TextBox.InnerLeftContentProperty.GetDefaultValue(typeof(TextBox)), value.InnerLeftContent))
        {
            writer.WriteMember(value, value.InnerLeftContent, "InnerLeftContent");
        }
        if (!object.Equals(TextBox.InnerRightContentProperty.GetDefaultValue(typeof(TextBox)), value.InnerRightContent))
        {
            writer.WriteMember(value, value.InnerRightContent, "InnerRightContent");
        }
        if (!object.Equals(TextBox.RevealPasswordProperty.GetDefaultValue(typeof(TextBox)), value.RevealPassword))
        {
            writer.WriteMember(value, value.RevealPassword, "RevealPassword");
        }
        if (!object.Equals(TextBox.TextWrappingProperty.GetDefaultValue(typeof(TextBox)), value.TextWrapping))
        {
            writer.WriteMember(value, value.TextWrapping, "TextWrapping");
        }
        if (!object.Equals(TextBox.NewLineProperty.GetDefaultValue(typeof(TextBox)), value.NewLine))
        {
            writer.WriteMember(value, value.NewLine, "NewLine");
        }
        if (!object.Equals(TextBox.CanCutProperty.GetUnsetValue(typeof(TextBox)), value.CanCut))
        {
            writer.WriteMember(value, value.CanCut, "CanCut");
        }
        if (!object.Equals(TextBox.CanCopyProperty.GetUnsetValue(typeof(TextBox)), value.CanCopy))
        {
            writer.WriteMember(value, value.CanCopy, "CanCopy");
        }
        if (!object.Equals(TextBox.CanPasteProperty.GetUnsetValue(typeof(TextBox)), value.CanPaste))
        {
            writer.WriteMember(value, value.CanPaste, "CanPaste");
        }
        if (!object.Equals(TextBox.IsUndoEnabledProperty.GetDefaultValue(typeof(TextBox)), value.IsUndoEnabled))
        {
            writer.WriteMember(value, value.IsUndoEnabled, "IsUndoEnabled");
        }
        if (!object.Equals(TextBox.UndoLimitProperty.GetDefaultValue(typeof(TextBox)), value.UndoLimit))
        {
            writer.WriteMember(value, value.UndoLimit, "UndoLimit");
        }
        if (!object.Equals(TextBox.CanUndoProperty.GetUnsetValue(typeof(TextBox)), value.CanUndo))
        {
            writer.WriteMember(value, value.CanUndo, "CanUndo");
        }
        if (!object.Equals(TextBox.CanRedoProperty.GetUnsetValue(typeof(TextBox)), value.CanRedo))
        {
            writer.WriteMember(value, value.CanRedo, "CanRedo");
        }
    }

    public static bool MemberHasValue(TextBox target, string member, object? value)
    {
        if (member == "AcceptsReturn")
        {
            return object.Equals(target.AcceptsReturn, value);
        }
        if (member == "AcceptsTab")
        {
            return object.Equals(target.AcceptsTab, value);
        }
        if (member == "CaretIndex")
        {
            return object.Equals(target.CaretIndex, value);
        }
        if (member == "IsReadOnly")
        {
            return object.Equals(target.IsReadOnly, value);
        }
        if (member == "PasswordChar")
        {
            return object.Equals(target.PasswordChar, value);
        }
        if (member == "SelectionBrush")
        {
            return object.Equals(target.SelectionBrush, value);
        }
        if (member == "SelectionForegroundBrush")
        {
            return object.Equals(target.SelectionForegroundBrush, value);
        }
        if (member == "CaretBrush")
        {
            return object.Equals(target.CaretBrush, value);
        }
        if (member == "SelectionStart")
        {
            return object.Equals(target.SelectionStart, value);
        }
        if (member == "SelectionEnd")
        {
            return object.Equals(target.SelectionEnd, value);
        }
        if (member == "MaxLength")
        {
            return object.Equals(target.MaxLength, value);
        }
        if (member == "MaxLines")
        {
            return object.Equals(target.MaxLines, value);
        }
        if (member == "LetterSpacing")
        {
            return object.Equals(target.LetterSpacing, value);
        }
        if (member == "LineHeight")
        {
            return object.Equals(target.LineHeight, value);
        }
        if (member == "Text")
        {
            return object.Equals(target.Text, value);
        }
        if (member == "SelectedText")
        {
            return object.Equals(target.SelectedText, value);
        }
        if (member == "HorizontalContentAlignment")
        {
            return object.Equals(target.HorizontalContentAlignment, value);
        }
        if (member == "VerticalContentAlignment")
        {
            return object.Equals(target.VerticalContentAlignment, value);
        }
        if (member == "TextAlignment")
        {
            return object.Equals(target.TextAlignment, value);
        }
        if (member == "Watermark")
        {
            return object.Equals(target.Watermark, value);
        }
        if (member == "UseFloatingWatermark")
        {
            return object.Equals(target.UseFloatingWatermark, value);
        }
        if (member == "InnerLeftContent")
        {
            return object.Equals(target.InnerLeftContent, value);
        }
        if (member == "InnerRightContent")
        {
            return object.Equals(target.InnerRightContent, value);
        }
        if (member == "RevealPassword")
        {
            return object.Equals(target.RevealPassword, value);
        }
        if (member == "TextWrapping")
        {
            return object.Equals(target.TextWrapping, value);
        }
        if (member == "NewLine")
        {
            return object.Equals(target.NewLine, value);
        }
        if (member == "CanCut")
        {
            return object.Equals(target.CanCut, value);
        }
        if (member == "CanCopy")
        {
            return object.Equals(target.CanCopy, value);
        }
        if (member == "CanPaste")
        {
            return object.Equals(target.CanPaste, value);
        }
        if (member == "IsUndoEnabled")
        {
            return object.Equals(target.IsUndoEnabled, value);
        }
        if (member == "UndoLimit")
        {
            return object.Equals(target.UndoLimit, value);
        }
        if (member == "CanUndo")
        {
            return object.Equals(target.CanUndo, value);
        }
        if (member == "CanRedo")
        {
            return object.Equals(target.CanRedo, value);
        }
        TemplatedControlConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
