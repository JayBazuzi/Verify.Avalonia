// <auto-generated />
#nullable enable
class RangeBaseConverter :
    WriteOnlyJsonConverter<RangeBase>
{
    public override void Write(VerifyJsonWriter writer, RangeBase value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TemplatedControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, RangeBase value)
    {
        if (!object.Equals(RangeBase.MinimumProperty.GetDefaultValue(typeof(RangeBase)), value.Minimum))
        {
            writer.WriteMember(value, value.Minimum, "Minimum");
        }
        if (!object.Equals(RangeBase.MaximumProperty.GetDefaultValue(typeof(RangeBase)), value.Maximum))
        {
            writer.WriteMember(value, value.Maximum, "Maximum");
        }
        if (!object.Equals(RangeBase.ValueProperty.GetDefaultValue(typeof(RangeBase)), value.Value))
        {
            writer.WriteMember(value, value.Value, "Value");
        }
        if (!object.Equals(RangeBase.SmallChangeProperty.GetDefaultValue(typeof(RangeBase)), value.SmallChange))
        {
            writer.WriteMember(value, value.SmallChange, "SmallChange");
        }
        if (!object.Equals(RangeBase.LargeChangeProperty.GetDefaultValue(typeof(RangeBase)), value.LargeChange))
        {
            writer.WriteMember(value, value.LargeChange, "LargeChange");
        }
    }

    public static bool MemberHasValue(RangeBase target, string member, object? value)
    {
        if (member == "Minimum")
        {
            return object.Equals(target.Minimum, value);
        }
        if (member == "Maximum")
        {
            return object.Equals(target.Maximum, value);
        }
        if (member == "Value")
        {
            return object.Equals(target.Value, value);
        }
        if (member == "SmallChange")
        {
            return object.Equals(target.SmallChange, value);
        }
        if (member == "LargeChange")
        {
            return object.Equals(target.LargeChange, value);
        }
        TemplatedControlConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
