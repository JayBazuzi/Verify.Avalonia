// <auto-generated />
class AutoCompleteBoxConverter :
    WriteOnlyJsonConverter<AutoCompleteBox>
{
    public override void Write(VerifyJsonWriter writer, AutoCompleteBox value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TemplatedControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, AutoCompleteBox value)
    {
        if (!object.Equals(AutoCompleteBox.MinimumPrefixLengthProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.MinimumPrefixLength))
        {
            writer.WriteMember(value, value.MinimumPrefixLength, "MinimumPrefixLength");
        }
        if (!object.Equals(AutoCompleteBox.IsTextCompletionEnabledProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.IsTextCompletionEnabled))
        {
            writer.WriteMember(value, value.IsTextCompletionEnabled, "IsTextCompletionEnabled");
        }
        if (!object.Equals(AutoCompleteBox.ItemTemplateProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.ItemTemplate))
        {
            writer.WriteMember(value, value.ItemTemplate, "ItemTemplate");
        }
        if (!object.Equals(AutoCompleteBox.MinimumPopulateDelayProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.MinimumPopulateDelay))
        {
            writer.WriteMember(value, value.MinimumPopulateDelay, "MinimumPopulateDelay");
        }
        if (!object.Equals(AutoCompleteBox.MaxDropDownHeightProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.MaxDropDownHeight))
        {
            writer.WriteMember(value, value.MaxDropDownHeight, "MaxDropDownHeight");
        }
        if (!object.Equals(AutoCompleteBox.IsDropDownOpenProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.IsDropDownOpen))
        {
            writer.WriteMember(value, value.IsDropDownOpen, "IsDropDownOpen");
        }
         writer.WriteMember(value, value.ValueMemberBinding, "ValueMemberBinding");
        if (!object.Equals(AutoCompleteBox.SelectedItemProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.SelectedItem))
        {
            writer.WriteMember(value, value.SelectedItem, "SelectedItem");
        }
        if (!object.Equals(AutoCompleteBox.TextProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.Text))
        {
            writer.WriteMember(value, value.Text, "Text");
        }
        if (!object.Equals(AutoCompleteBox.SearchTextProperty.GetUnsetValue(typeof(AutoCompleteBox)), value.SearchText))
        {
            writer.WriteMember(value, value.SearchText, "SearchText");
        }
        if (!object.Equals(AutoCompleteBox.FilterModeProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.FilterMode))
        {
            writer.WriteMember(value, value.FilterMode, "FilterMode");
        }
        if (!object.Equals(AutoCompleteBox.WatermarkProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.Watermark))
        {
            writer.WriteMember(value, value.Watermark, "Watermark");
        }
        if (!object.Equals(AutoCompleteBox.ItemFilterProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.ItemFilter))
        {
            writer.WriteMember(value, value.ItemFilter, "ItemFilter");
        }
        if (!object.Equals(AutoCompleteBox.TextFilterProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.TextFilter))
        {
            writer.WriteMember(value, value.TextFilter, "TextFilter");
        }
        if (!object.Equals(AutoCompleteBox.ItemSelectorProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.ItemSelector))
        {
            writer.WriteMember(value, value.ItemSelector, "ItemSelector");
        }
        if (!object.Equals(AutoCompleteBox.TextSelectorProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.TextSelector))
        {
            writer.WriteMember(value, value.TextSelector, "TextSelector");
        }
        if (!object.Equals(AutoCompleteBox.AsyncPopulatorProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.AsyncPopulator))
        {
            writer.WriteMember(value, value.AsyncPopulator, "AsyncPopulator");
        }
        if (!object.Equals(AutoCompleteBox.ItemsSourceProperty.GetDefaultValue(typeof(AutoCompleteBox)), value.ItemsSource))
        {
            writer.WriteMember(value, value.ItemsSource, "ItemsSource");
        }
    }
}
