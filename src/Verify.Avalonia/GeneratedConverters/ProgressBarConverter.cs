// <auto-generated />
#nullable enable
class ProgressBarConverter :
    WriteOnlyJsonConverter<ProgressBar>
{
    public override void Write(VerifyJsonWriter writer, ProgressBar value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        RangeBaseConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, ProgressBar value)
    {
        if (!object.Equals(ProgressBar.PercentageProperty.GetUnsetValue(typeof(ProgressBar)), value.Percentage))
        {
            writer.WriteMember(value, value.Percentage, "Percentage");
        }
         writer.WriteMember(value, value.TemplateSettings, "TemplateSettings");
        if (!object.Equals(ProgressBar.IsIndeterminateProperty.GetDefaultValue(typeof(ProgressBar)), value.IsIndeterminate))
        {
            writer.WriteMember(value, value.IsIndeterminate, "IsIndeterminate");
        }
        if (!object.Equals(ProgressBar.ShowProgressTextProperty.GetDefaultValue(typeof(ProgressBar)), value.ShowProgressText))
        {
            writer.WriteMember(value, value.ShowProgressText, "ShowProgressText");
        }
        if (!object.Equals(ProgressBar.ProgressTextFormatProperty.GetDefaultValue(typeof(ProgressBar)), value.ProgressTextFormat))
        {
            writer.WriteMember(value, value.ProgressTextFormat, "ProgressTextFormat");
        }
        if (!object.Equals(ProgressBar.OrientationProperty.GetDefaultValue(typeof(ProgressBar)), value.Orientation))
        {
            writer.WriteMember(value, value.Orientation, "Orientation");
        }
    }

    public static bool MemberHasValue(ProgressBar target, string member, object? value)
    {
        if (member == "Percentage")
        {
            return object.Equals(target.Percentage, value);
        }
        if (member == "TemplateSettings")
        {
            return object.Equals(target.TemplateSettings, value);
        }
        if (member == "IsIndeterminate")
        {
            return object.Equals(target.IsIndeterminate, value);
        }
        if (member == "ShowProgressText")
        {
            return object.Equals(target.ShowProgressText, value);
        }
        if (member == "ProgressTextFormat")
        {
            return object.Equals(target.ProgressTextFormat, value);
        }
        if (member == "Orientation")
        {
            return object.Equals(target.Orientation, value);
        }
        throw new($"Member not found: {member}");
    }
}
