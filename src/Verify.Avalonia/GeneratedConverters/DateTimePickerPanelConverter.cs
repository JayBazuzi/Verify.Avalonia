// <auto-generated />
#nullable enable
class DateTimePickerPanelConverter :
    WriteOnlyJsonConverter<DateTimePickerPanel>
{
    public override void Write(VerifyJsonWriter writer, DateTimePickerPanel value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        PanelConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, DateTimePickerPanel value)
    {
        if (!object.Equals(DateTimePickerPanel.PanelTypeProperty.GetDefaultValue(typeof(DateTimePickerPanel)), value.PanelType))
        {
            writer.WriteMember(value, value.PanelType, "PanelType");
        }
        if (!object.Equals(DateTimePickerPanel.ItemHeightProperty.GetDefaultValue(typeof(DateTimePickerPanel)), value.ItemHeight))
        {
            writer.WriteMember(value, value.ItemHeight, "ItemHeight");
        }
        if (!object.Equals(DateTimePickerPanel.ItemFormatProperty.GetDefaultValue(typeof(DateTimePickerPanel)), value.ItemFormat))
        {
            writer.WriteMember(value, value.ItemFormat, "ItemFormat");
        }
        if (!object.Equals(DateTimePickerPanel.ShouldLoopProperty.GetDefaultValue(typeof(DateTimePickerPanel)), value.ShouldLoop))
        {
            writer.WriteMember(value, value.ShouldLoop, "ShouldLoop");
        }
         writer.WriteMember(value, value.MinimumValue, "MinimumValue");
         writer.WriteMember(value, value.MaximumValue, "MaximumValue");
         writer.WriteMember(value, value.SelectedValue, "SelectedValue");
         writer.WriteMember(value, value.Increment, "Increment");
         writer.WriteMember(value, value.Offset, "Offset");
         writer.WriteMember(value, value.CanHorizontallyScroll, "CanHorizontallyScroll");
         writer.WriteMember(value, value.CanVerticallyScroll, "CanVerticallyScroll");
         writer.WriteMember(value, value.IsLogicalScrollEnabled, "IsLogicalScrollEnabled");
         writer.WriteMember(value, value.ScrollSize, "ScrollSize");
         writer.WriteMember(value, value.PageScrollSize, "PageScrollSize");
         writer.WriteMember(value, value.Extent, "Extent");
         writer.WriteMember(value, value.Viewport, "Viewport");
    }

    public static bool MemberHasValue(DateTimePickerPanel target, string member, object? value)
    {
        if (member == "PanelType")
        {
            return object.Equals(target.PanelType, value);
        }
        if (member == "ItemHeight")
        {
            return object.Equals(target.ItemHeight, value);
        }
        if (member == "ItemFormat")
        {
            return object.Equals(target.ItemFormat, value);
        }
        if (member == "ShouldLoop")
        {
            return object.Equals(target.ShouldLoop, value);
        }
        if (member == "MinimumValue")
        {
            return object.Equals(target.MinimumValue, value);
        }
        if (member == "MaximumValue")
        {
            return object.Equals(target.MaximumValue, value);
        }
        if (member == "SelectedValue")
        {
            return object.Equals(target.SelectedValue, value);
        }
        if (member == "Increment")
        {
            return object.Equals(target.Increment, value);
        }
        if (member == "Offset")
        {
            return object.Equals(target.Offset, value);
        }
        if (member == "CanHorizontallyScroll")
        {
            return object.Equals(target.CanHorizontallyScroll, value);
        }
        if (member == "CanVerticallyScroll")
        {
            return object.Equals(target.CanVerticallyScroll, value);
        }
        if (member == "IsLogicalScrollEnabled")
        {
            return object.Equals(target.IsLogicalScrollEnabled, value);
        }
        if (member == "ScrollSize")
        {
            return object.Equals(target.ScrollSize, value);
        }
        if (member == "PageScrollSize")
        {
            return object.Equals(target.PageScrollSize, value);
        }
        if (member == "Extent")
        {
            return object.Equals(target.Extent, value);
        }
        if (member == "Viewport")
        {
            return object.Equals(target.Viewport, value);
        }
        throw new($"Member not found: {member}");
    }
}
