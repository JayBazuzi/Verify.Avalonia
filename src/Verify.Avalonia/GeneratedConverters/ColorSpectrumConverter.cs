// <auto-generated />
#nullable enable
class ColorSpectrumConverter :
    WriteOnlyJsonConverter<ColorSpectrum>
{
    public override void Write(VerifyJsonWriter writer, ColorSpectrum value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TemplatedControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, ColorSpectrum value)
    {
        if (!object.Equals(ColorSpectrum.ColorProperty.GetDefaultValue(typeof(ColorSpectrum)), value.Color))
        {
            writer.WriteMember(value, value.Color, "Color");
        }
        if (!object.Equals(ColorSpectrum.ComponentsProperty.GetDefaultValue(typeof(ColorSpectrum)), value.Components))
        {
            writer.WriteMember(value, value.Components, "Components");
        }
        if (!object.Equals(ColorSpectrum.HsvColorProperty.GetDefaultValue(typeof(ColorSpectrum)), value.HsvColor))
        {
            writer.WriteMember(value, value.HsvColor, "HsvColor");
        }
        if (!object.Equals(ColorSpectrum.MaxHueProperty.GetDefaultValue(typeof(ColorSpectrum)), value.MaxHue))
        {
            writer.WriteMember(value, value.MaxHue, "MaxHue");
        }
        if (!object.Equals(ColorSpectrum.MaxSaturationProperty.GetDefaultValue(typeof(ColorSpectrum)), value.MaxSaturation))
        {
            writer.WriteMember(value, value.MaxSaturation, "MaxSaturation");
        }
        if (!object.Equals(ColorSpectrum.MaxValueProperty.GetDefaultValue(typeof(ColorSpectrum)), value.MaxValue))
        {
            writer.WriteMember(value, value.MaxValue, "MaxValue");
        }
        if (!object.Equals(ColorSpectrum.MinHueProperty.GetDefaultValue(typeof(ColorSpectrum)), value.MinHue))
        {
            writer.WriteMember(value, value.MinHue, "MinHue");
        }
        if (!object.Equals(ColorSpectrum.MinSaturationProperty.GetDefaultValue(typeof(ColorSpectrum)), value.MinSaturation))
        {
            writer.WriteMember(value, value.MinSaturation, "MinSaturation");
        }
        if (!object.Equals(ColorSpectrum.MinValueProperty.GetDefaultValue(typeof(ColorSpectrum)), value.MinValue))
        {
            writer.WriteMember(value, value.MinValue, "MinValue");
        }
        if (!object.Equals(ColorSpectrum.ShapeProperty.GetDefaultValue(typeof(ColorSpectrum)), value.Shape))
        {
            writer.WriteMember(value, value.Shape, "Shape");
        }
        if (!object.Equals(ColorSpectrum.ThirdComponentProperty.GetUnsetValue(typeof(ColorSpectrum)), value.ThirdComponent))
        {
            writer.WriteMember(value, value.ThirdComponent, "ThirdComponent");
        }
    }

    public static bool MemberHasValue(ColorSpectrum target, string member, object? value)
    {
        if (member == "Color")
        {
            return object.Equals(target.Color, value);
        }
        if (member == "Components")
        {
            return object.Equals(target.Components, value);
        }
        if (member == "HsvColor")
        {
            return object.Equals(target.HsvColor, value);
        }
        if (member == "MaxHue")
        {
            return object.Equals(target.MaxHue, value);
        }
        if (member == "MaxSaturation")
        {
            return object.Equals(target.MaxSaturation, value);
        }
        if (member == "MaxValue")
        {
            return object.Equals(target.MaxValue, value);
        }
        if (member == "MinHue")
        {
            return object.Equals(target.MinHue, value);
        }
        if (member == "MinSaturation")
        {
            return object.Equals(target.MinSaturation, value);
        }
        if (member == "MinValue")
        {
            return object.Equals(target.MinValue, value);
        }
        if (member == "Shape")
        {
            return object.Equals(target.Shape, value);
        }
        if (member == "ThirdComponent")
        {
            return object.Equals(target.ThirdComponent, value);
        }
        throw new($"Member not found: {member}");
    }
}
