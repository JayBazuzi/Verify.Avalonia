// <auto-generated />
#nullable enable
class ColorViewConverter :
    WriteOnlyJsonConverter<ColorView>
{
    public override void Write(VerifyJsonWriter writer, ColorView value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TemplatedControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, ColorView value)
    {
        var type = typeof(ColorView);
        if (ColorView.ColorProperty.ShouldIncludeProperty(value, value.Color))
        {
            writer.WriteMember(value, value.Color, "Color");
        }
        if (ColorView.ColorModelProperty.ShouldIncludeProperty(value, value.ColorModel))
        {
            writer.WriteMember(value, value.ColorModel, "ColorModel");
        }
        if (ColorView.ColorSpectrumComponentsProperty.ShouldIncludeProperty(value, value.ColorSpectrumComponents))
        {
            writer.WriteMember(value, value.ColorSpectrumComponents, "ColorSpectrumComponents");
        }
        if (ColorView.ColorSpectrumShapeProperty.ShouldIncludeProperty(value, value.ColorSpectrumShape))
        {
            writer.WriteMember(value, value.ColorSpectrumShape, "ColorSpectrumShape");
        }
        if (ColorView.HexInputAlphaPositionProperty.ShouldIncludeProperty(value, value.HexInputAlphaPosition))
        {
            writer.WriteMember(value, value.HexInputAlphaPosition, "HexInputAlphaPosition");
        }
        if (ColorView.HsvColorProperty.ShouldIncludeProperty(value, value.HsvColor))
        {
            writer.WriteMember(value, value.HsvColor, "HsvColor");
        }
        if (ColorView.IsAccentColorsVisibleProperty.ShouldIncludeProperty(value, value.IsAccentColorsVisible))
        {
            writer.WriteMember(value, value.IsAccentColorsVisible, "IsAccentColorsVisible");
        }
        if (ColorView.IsAlphaEnabledProperty.ShouldIncludeProperty(value, value.IsAlphaEnabled))
        {
            writer.WriteMember(value, value.IsAlphaEnabled, "IsAlphaEnabled");
        }
        if (ColorView.IsAlphaVisibleProperty.ShouldIncludeProperty(value, value.IsAlphaVisible))
        {
            writer.WriteMember(value, value.IsAlphaVisible, "IsAlphaVisible");
        }
        if (ColorView.IsColorComponentsVisibleProperty.ShouldIncludeProperty(value, value.IsColorComponentsVisible))
        {
            writer.WriteMember(value, value.IsColorComponentsVisible, "IsColorComponentsVisible");
        }
        if (ColorView.IsColorModelVisibleProperty.ShouldIncludeProperty(value, value.IsColorModelVisible))
        {
            writer.WriteMember(value, value.IsColorModelVisible, "IsColorModelVisible");
        }
        if (ColorView.IsColorPaletteVisibleProperty.ShouldIncludeProperty(value, value.IsColorPaletteVisible))
        {
            writer.WriteMember(value, value.IsColorPaletteVisible, "IsColorPaletteVisible");
        }
        if (ColorView.IsColorPreviewVisibleProperty.ShouldIncludeProperty(value, value.IsColorPreviewVisible))
        {
            writer.WriteMember(value, value.IsColorPreviewVisible, "IsColorPreviewVisible");
        }
        if (ColorView.IsColorSpectrumVisibleProperty.ShouldIncludeProperty(value, value.IsColorSpectrumVisible))
        {
            writer.WriteMember(value, value.IsColorSpectrumVisible, "IsColorSpectrumVisible");
        }
        if (ColorView.IsColorSpectrumSliderVisibleProperty.ShouldIncludeProperty(value, value.IsColorSpectrumSliderVisible))
        {
            writer.WriteMember(value, value.IsColorSpectrumSliderVisible, "IsColorSpectrumSliderVisible");
        }
        if (ColorView.IsComponentSliderVisibleProperty.ShouldIncludeProperty(value, value.IsComponentSliderVisible))
        {
            writer.WriteMember(value, value.IsComponentSliderVisible, "IsComponentSliderVisible");
        }
        if (ColorView.IsComponentTextInputVisibleProperty.ShouldIncludeProperty(value, value.IsComponentTextInputVisible))
        {
            writer.WriteMember(value, value.IsComponentTextInputVisible, "IsComponentTextInputVisible");
        }
        if (ColorView.IsHexInputVisibleProperty.ShouldIncludeProperty(value, value.IsHexInputVisible))
        {
            writer.WriteMember(value, value.IsHexInputVisible, "IsHexInputVisible");
        }
        if (ColorView.MaxHueProperty.ShouldIncludeProperty(value, value.MaxHue))
        {
            writer.WriteMember(value, value.MaxHue, "MaxHue");
        }
        if (ColorView.MaxSaturationProperty.ShouldIncludeProperty(value, value.MaxSaturation))
        {
            writer.WriteMember(value, value.MaxSaturation, "MaxSaturation");
        }
        if (ColorView.MaxValueProperty.ShouldIncludeProperty(value, value.MaxValue))
        {
            writer.WriteMember(value, value.MaxValue, "MaxValue");
        }
        if (ColorView.MinHueProperty.ShouldIncludeProperty(value, value.MinHue))
        {
            writer.WriteMember(value, value.MinHue, "MinHue");
        }
        if (ColorView.MinSaturationProperty.ShouldIncludeProperty(value, value.MinSaturation))
        {
            writer.WriteMember(value, value.MinSaturation, "MinSaturation");
        }
        if (ColorView.MinValueProperty.ShouldIncludeProperty(value, value.MinValue))
        {
            writer.WriteMember(value, value.MinValue, "MinValue");
        }
        if (ColorView.PaletteColorsProperty.ShouldIncludeProperty(value, value.PaletteColors))
        {
            writer.WriteMember(value, value.PaletteColors, "PaletteColors");
        }
        if (ColorView.PaletteColumnCountProperty.ShouldIncludeProperty(value, value.PaletteColumnCount))
        {
            writer.WriteMember(value, value.PaletteColumnCount, "PaletteColumnCount");
        }
        if (ColorView.PaletteProperty.ShouldIncludeProperty(value, value.Palette))
        {
            writer.WriteMember(value, value.Palette, "Palette");
        }
        if (ColorView.SelectedIndexProperty.ShouldIncludeProperty(value, value.SelectedIndex))
        {
            writer.WriteMember(value, value.SelectedIndex, "SelectedIndex");
        }
    }
}
