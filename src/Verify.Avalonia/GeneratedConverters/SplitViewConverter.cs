// <auto-generated />
#nullable enable
class SplitViewConverter :
    WriteOnlyJsonConverter<SplitView>
{
    public override void Write(VerifyJsonWriter writer, SplitView value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ContentControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, SplitView value)
    {
        if (SplitView.CompactPaneLengthProperty.ShouldIncludeProperty(value, value.CompactPaneLength))
        {
            writer.WriteMember(value, value.CompactPaneLength, "CompactPaneLength");
        }
        if (SplitView.DisplayModeProperty.ShouldIncludeProperty(value, value.DisplayMode))
        {
            writer.WriteMember(value, value.DisplayMode, "DisplayMode");
        }
        if (SplitView.IsPaneOpenProperty.ShouldIncludeProperty(value, value.IsPaneOpen))
        {
            writer.WriteMember(value, value.IsPaneOpen, "IsPaneOpen");
        }
        if (SplitView.OpenPaneLengthProperty.ShouldIncludeProperty(value, value.OpenPaneLength))
        {
            writer.WriteMember(value, value.OpenPaneLength, "OpenPaneLength");
        }
        if (SplitView.PaneBackgroundProperty.ShouldIncludeProperty(value, value.PaneBackground))
        {
            writer.WriteMember(value, value.PaneBackground, "PaneBackground");
        }
        if (SplitView.PanePlacementProperty.ShouldIncludeProperty(value, value.PanePlacement))
        {
            writer.WriteMember(value, value.PanePlacement, "PanePlacement");
        }
        if (SplitView.PaneProperty.ShouldIncludeProperty(value, value.Pane))
        {
            writer.WriteMember(value, value.Pane, "Pane");
        }
        if (SplitView.PaneTemplateProperty.ShouldIncludeProperty(value, value.PaneTemplate))
        {
            writer.WriteMember(value, value.PaneTemplate, "PaneTemplate");
        }
        if (SplitView.UseLightDismissOverlayModeProperty.ShouldIncludeProperty(value, value.UseLightDismissOverlayMode))
        {
            writer.WriteMember(value, value.UseLightDismissOverlayMode, "UseLightDismissOverlayMode");
        }
        if (SplitView.TemplateSettingsProperty.ShouldIncludeProperty(value, value.TemplateSettings))
        {
            writer.WriteMember(value, value.TemplateSettings, "TemplateSettings");
        }
    }
}
