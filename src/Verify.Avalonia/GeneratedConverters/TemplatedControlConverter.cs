// <auto-generated />
#nullable enable
class TemplatedControlConverter :
    WriteOnlyJsonConverter<TemplatedControl>,
    IAvaloniaConverter<TemplatedControl>
{
    public override void Write(VerifyJsonWriter writer, TemplatedControl value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, TemplatedControl value)
    {
        if (!object.Equals(TemplatedControl.BackgroundProperty.GetDefaultValue(typeof(TemplatedControl)), value.Background))
        {
            writer.WriteMember(value, value.Background, "Background");
        }
        if (!object.Equals(TemplatedControl.BorderBrushProperty.GetDefaultValue(typeof(TemplatedControl)), value.BorderBrush))
        {
            writer.WriteMember(value, value.BorderBrush, "BorderBrush");
        }
        if (!object.Equals(TemplatedControl.BorderThicknessProperty.GetDefaultValue(typeof(TemplatedControl)), value.BorderThickness))
        {
            writer.WriteMember(value, value.BorderThickness, "BorderThickness");
        }
        if (!object.Equals(TemplatedControl.CornerRadiusProperty.GetDefaultValue(typeof(TemplatedControl)), value.CornerRadius))
        {
            writer.WriteMember(value, value.CornerRadius, "CornerRadius");
        }
        if (!object.Equals(TemplatedControl.FontFamilyProperty.GetDefaultValue(typeof(TemplatedControl)), value.FontFamily))
        {
            writer.WriteMember(value, value.FontFamily, "FontFamily");
        }
        if (!object.Equals(TemplatedControl.FontSizeProperty.GetDefaultValue(typeof(TemplatedControl)), value.FontSize))
        {
            writer.WriteMember(value, value.FontSize, "FontSize");
        }
        if (!object.Equals(TemplatedControl.FontStyleProperty.GetDefaultValue(typeof(TemplatedControl)), value.FontStyle))
        {
            writer.WriteMember(value, value.FontStyle, "FontStyle");
        }
        if (!object.Equals(TemplatedControl.FontWeightProperty.GetDefaultValue(typeof(TemplatedControl)), value.FontWeight))
        {
            writer.WriteMember(value, value.FontWeight, "FontWeight");
        }
        if (!object.Equals(TemplatedControl.FontStretchProperty.GetDefaultValue(typeof(TemplatedControl)), value.FontStretch))
        {
            writer.WriteMember(value, value.FontStretch, "FontStretch");
        }
        if (!object.Equals(TemplatedControl.ForegroundProperty.GetDefaultValue(typeof(TemplatedControl)), value.Foreground))
        {
            writer.WriteMember(value, value.Foreground, "Foreground");
        }
        if (!object.Equals(TemplatedControl.PaddingProperty.GetDefaultValue(typeof(TemplatedControl)), value.Padding))
        {
            writer.WriteMember(value, value.Padding, "Padding");
        }
    }

    public static bool MemberHasValue(TemplatedControl target, string member, object? value)
    {
        if (member == "Background")
        {
            return object.Equals(target.Background, value);
        }
        if (member == "BorderBrush")
        {
            return object.Equals(target.BorderBrush, value);
        }
        if (member == "BorderThickness")
        {
            return object.Equals(target.BorderThickness, value);
        }
        if (member == "CornerRadius")
        {
            return object.Equals(target.CornerRadius, value);
        }
        if (member == "FontFamily")
        {
            return object.Equals(target.FontFamily, value);
        }
        if (member == "FontSize")
        {
            return object.Equals(target.FontSize, value);
        }
        if (member == "FontStyle")
        {
            return object.Equals(target.FontStyle, value);
        }
        if (member == "FontWeight")
        {
            return object.Equals(target.FontWeight, value);
        }
        if (member == "FontStretch")
        {
            return object.Equals(target.FontStretch, value);
        }
        if (member == "Foreground")
        {
            return object.Equals(target.Foreground, value);
        }
        if (member == "Padding")
        {
            return object.Equals(target.Padding, value);
        }
        ControlConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
