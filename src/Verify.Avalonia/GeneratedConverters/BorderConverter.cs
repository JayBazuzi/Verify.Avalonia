// <auto-generated />
#nullable enable
class BorderConverter :
    WriteOnlyJsonConverter<Border>
{
    public override void Write(VerifyJsonWriter writer, Border value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        DecoratorConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Border value)
    {
        if (!object.Equals(Border.BackgroundProperty.GetDefaultValue(typeof(Border)), value.Background))
        {
            writer.WriteMember(value, value.Background, "Background");
        }
        if (!object.Equals(Border.BorderBrushProperty.GetDefaultValue(typeof(Border)), value.BorderBrush))
        {
            writer.WriteMember(value, value.BorderBrush, "BorderBrush");
        }
        if (!object.Equals(Border.BorderThicknessProperty.GetDefaultValue(typeof(Border)), value.BorderThickness))
        {
            writer.WriteMember(value, value.BorderThickness, "BorderThickness");
        }
        if (!object.Equals(Border.CornerRadiusProperty.GetDefaultValue(typeof(Border)), value.CornerRadius))
        {
            writer.WriteMember(value, value.CornerRadius, "CornerRadius");
        }
        if (!object.Equals(Border.BoxShadowProperty.GetDefaultValue(typeof(Border)), value.BoxShadow))
        {
            writer.WriteMember(value, value.BoxShadow, "BoxShadow");
        }
         writer.WriteMember(value, value.ClipToBoundsRadius, "ClipToBoundsRadius");
    }

    public static bool MemberHasValue(Border target, string member, object? value)
    {
        if (member == "Background")
        {
            return object.Equals(target.Background, value);
        }
        if (member == "BorderBrush")
        {
            return object.Equals(target.BorderBrush, value);
        }
        if (member == "BorderThickness")
        {
            return object.Equals(target.BorderThickness, value);
        }
        if (member == "CornerRadius")
        {
            return object.Equals(target.CornerRadius, value);
        }
        if (member == "BoxShadow")
        {
            return object.Equals(target.BoxShadow, value);
        }
        if (member == "ClipToBoundsRadius")
        {
            return object.Equals(target.ClipToBoundsRadius, value);
        }
        throw new($"Member not found: {member}");
    }
}
