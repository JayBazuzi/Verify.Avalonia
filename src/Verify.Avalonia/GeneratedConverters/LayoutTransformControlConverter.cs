// <auto-generated />
#nullable enable
class LayoutTransformControlConverter :
    WriteOnlyJsonConverter<LayoutTransformControl>,
    IAvaloniaConverter<LayoutTransformControl>
{
    public override void Write(VerifyJsonWriter writer, LayoutTransformControl value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        DecoratorConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, LayoutTransformControl value)
    {
        if (!object.Equals(LayoutTransformControl.LayoutTransformProperty.GetDefaultValue(typeof(LayoutTransformControl)), value.LayoutTransform))
        {
            writer.WriteMember(value, value.LayoutTransform, "LayoutTransform");
        }
        if (!object.Equals(LayoutTransformControl.UseRenderTransformProperty.GetDefaultValue(typeof(LayoutTransformControl)), value.UseRenderTransform))
        {
            writer.WriteMember(value, value.UseRenderTransform, "UseRenderTransform");
        }
         writer.WriteMember(value, value.TransformRoot, "TransformRoot");
    }

    public static bool MemberHasValue(LayoutTransformControl target, string member, object? value)
    {
        if (member == "LayoutTransform")
        {
            return object.Equals(target.LayoutTransform, value);
        }
        if (member == "UseRenderTransform")
        {
            return object.Equals(target.UseRenderTransform, value);
        }
        if (member == "TransformRoot")
        {
            return object.Equals(target.TransformRoot, value);
        }
        DecoratorConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
