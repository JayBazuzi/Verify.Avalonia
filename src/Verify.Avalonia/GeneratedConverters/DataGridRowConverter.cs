// <auto-generated />
#nullable enable
class DataGridRowConverter :
    WriteOnlyJsonConverter<DataGridRow>,
    IAvaloniaConverter<DataGridRow>
{
    public override void Write(VerifyJsonWriter writer, DataGridRow value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        TemplatedControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, DataGridRow value)
    {
        if (value.ShouldIncludeProperty(DataGridRow.HeaderProperty))
        if (!object.Equals(DataGridRow.HeaderProperty.GetDefaultValue(typeof(DataGridRow)), value.Header))
        {
            writer.WriteMember(value, value.Header, "Header");
        }
        if (value.ShouldIncludeProperty(DataGridRow.IsValidProperty))
        if (!object.Equals(DataGridRow.IsValidProperty.GetUnsetValue(typeof(DataGridRow)), value.IsValid))
        {
            writer.WriteMember(value, value.IsValid, "IsValid");
        }
        if (value.ShouldIncludeProperty(DataGridRow.DetailsTemplateProperty))
        if (!object.Equals(DataGridRow.DetailsTemplateProperty.GetDefaultValue(typeof(DataGridRow)), value.DetailsTemplate))
        {
            writer.WriteMember(value, value.DetailsTemplate, "DetailsTemplate");
        }
        if (value.ShouldIncludeProperty(DataGridRow.AreDetailsVisibleProperty))
        if (!object.Equals(DataGridRow.AreDetailsVisibleProperty.GetDefaultValue(typeof(DataGridRow)), value.AreDetailsVisible))
        {
            writer.WriteMember(value, value.AreDetailsVisible, "AreDetailsVisible");
        }
    }

    public static bool MemberHasValue(DataGridRow target, string member, object? value)
    {
        if (member == "Header")
        {
            return object.Equals(target.Header, value);
        }
        if (member == "IsValid")
        {
            return object.Equals(target.IsValid, value);
        }
        if (member == "DetailsTemplate")
        {
            return object.Equals(target.DetailsTemplate, value);
        }
        if (member == "AreDetailsVisible")
        {
            return object.Equals(target.AreDetailsVisible, value);
        }
        TemplatedControlConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
