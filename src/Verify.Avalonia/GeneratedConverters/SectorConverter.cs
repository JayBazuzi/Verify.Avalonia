// <auto-generated />
#nullable enable
class SectorConverter :
    WriteOnlyJsonConverter<Sector>,
    IAvaloniaConverter<Sector>
{
    public override void Write(VerifyJsonWriter writer, Sector value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ShapeConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Sector value)
    {
        if (!object.Equals(Sector.StartAngleProperty.GetDefaultValue(typeof(Sector)), value.StartAngle))
        {
            writer.WriteMember(value, value.StartAngle, "StartAngle");
        }
        if (!object.Equals(Sector.SweepAngleProperty.GetDefaultValue(typeof(Sector)), value.SweepAngle))
        {
            writer.WriteMember(value, value.SweepAngle, "SweepAngle");
        }
    }

    public static bool MemberHasValue(Sector target, string member, object? value)
    {
        if (member == "StartAngle")
        {
            return object.Equals(target.StartAngle, value);
        }
        if (member == "SweepAngle")
        {
            return object.Equals(target.SweepAngle, value);
        }
        ShapeConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
