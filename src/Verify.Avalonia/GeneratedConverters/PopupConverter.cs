// <auto-generated />
#nullable enable
class PopupConverter :
    WriteOnlyJsonConverter<Popup>
{
    public override void Write(VerifyJsonWriter writer, Popup value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Popup value)
    {
        var type = typeof(Popup);
        writer.WriteMember(value, value.Host, "Host");
        if (Popup.WindowManagerAddShadowHintProperty.ShouldIncludeProperty(value, value.WindowManagerAddShadowHint))
        {
            writer.WriteMember(value, value.WindowManagerAddShadowHint, "WindowManagerAddShadowHint");
        }
        if (Popup.ChildProperty.ShouldIncludeProperty(value, value.Child))
        {
            writer.WriteMember(value, value.Child, "Child");
        }
        writer.WriteMember(value, value.DependencyResolver, "DependencyResolver");
        if (Popup.InheritsTransformProperty.ShouldIncludeProperty(value, value.InheritsTransform))
        {
            writer.WriteMember(value, value.InheritsTransform, "InheritsTransform");
        }
        if (Popup.IsLightDismissEnabledProperty.ShouldIncludeProperty(value, value.IsLightDismissEnabled))
        {
            writer.WriteMember(value, value.IsLightDismissEnabled, "IsLightDismissEnabled");
        }
        if (Popup.IsOpenProperty.ShouldIncludeProperty(value, value.IsOpen))
        {
            writer.WriteMember(value, value.IsOpen, "IsOpen");
        }
        if (Popup.PlacementAnchorProperty.ShouldIncludeProperty(value, value.PlacementAnchor))
        {
            writer.WriteMember(value, value.PlacementAnchor, "PlacementAnchor");
        }
        if (Popup.PlacementConstraintAdjustmentProperty.ShouldIncludeProperty(value, value.PlacementConstraintAdjustment))
        {
            writer.WriteMember(value, value.PlacementConstraintAdjustment, "PlacementConstraintAdjustment");
        }
        if (Popup.PlacementGravityProperty.ShouldIncludeProperty(value, value.PlacementGravity))
        {
            writer.WriteMember(value, value.PlacementGravity, "PlacementGravity");
        }
        if (Popup.PlacementProperty.ShouldIncludeProperty(value, value.Placement))
        {
            writer.WriteMember(value, value.Placement, "Placement");
        }
        if (Popup.PlacementRectProperty.ShouldIncludeProperty(value, value.PlacementRect))
        {
            writer.WriteMember(value, value.PlacementRect, "PlacementRect");
        }
        if (Popup.PlacementTargetProperty.ShouldIncludeProperty(value, value.PlacementTarget))
        {
            writer.WriteMember(value, value.PlacementTarget, "PlacementTarget");
        }
        if (Popup.OverlayDismissEventPassThroughProperty.ShouldIncludeProperty(value, value.OverlayDismissEventPassThrough))
        {
            writer.WriteMember(value, value.OverlayDismissEventPassThrough, "OverlayDismissEventPassThrough");
        }
        if (Popup.OverlayInputPassThroughElementProperty.ShouldIncludeProperty(value, value.OverlayInputPassThroughElement))
        {
            writer.WriteMember(value, value.OverlayInputPassThroughElement, "OverlayInputPassThroughElement");
        }
        if (Popup.HorizontalOffsetProperty.ShouldIncludeProperty(value, value.HorizontalOffset))
        {
            writer.WriteMember(value, value.HorizontalOffset, "HorizontalOffset");
        }
        if (Popup.VerticalOffsetProperty.ShouldIncludeProperty(value, value.VerticalOffset))
        {
            writer.WriteMember(value, value.VerticalOffset, "VerticalOffset");
        }
        if (Popup.TopmostProperty.ShouldIncludeProperty(value, value.Topmost))
        {
            writer.WriteMember(value, value.Topmost, "Topmost");
        }
        writer.WriteMember(value, value.IsPointerOverPopup, "IsPointerOverPopup");
    }
}
