// <auto-generated />
class PopupConverter :
    WriteOnlyJsonConverter<Popup>
{
    public override void Write(VerifyJsonWriter writer, Popup value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Popup value)
    {
         writer.WriteMember(value, value.Host, "Host");
        if (!object.Equals(Popup.WindowManagerAddShadowHintProperty.GetDefaultValue(typeof(Popup)), value.WindowManagerAddShadowHint))
        {
            writer.WriteMember(value, value.WindowManagerAddShadowHint, "WindowManagerAddShadowHint");
        }
        if (!object.Equals(Popup.ChildProperty.GetDefaultValue(typeof(Popup)), value.Child))
        {
            writer.WriteMember(value, value.Child, "Child");
        }
         writer.WriteMember(value, value.DependencyResolver, "DependencyResolver");
        if (!object.Equals(Popup.InheritsTransformProperty.GetDefaultValue(typeof(Popup)), value.InheritsTransform))
        {
            writer.WriteMember(value, value.InheritsTransform, "InheritsTransform");
        }
        if (!object.Equals(Popup.IsLightDismissEnabledProperty.GetDefaultValue(typeof(Popup)), value.IsLightDismissEnabled))
        {
            writer.WriteMember(value, value.IsLightDismissEnabled, "IsLightDismissEnabled");
        }
        if (!object.Equals(Popup.IsOpenProperty.GetDefaultValue(typeof(Popup)), value.IsOpen))
        {
            writer.WriteMember(value, value.IsOpen, "IsOpen");
        }
        if (!object.Equals(Popup.PlacementAnchorProperty.GetDefaultValue(typeof(Popup)), value.PlacementAnchor))
        {
            writer.WriteMember(value, value.PlacementAnchor, "PlacementAnchor");
        }
        if (!object.Equals(Popup.PlacementConstraintAdjustmentProperty.GetDefaultValue(typeof(Popup)), value.PlacementConstraintAdjustment))
        {
            writer.WriteMember(value, value.PlacementConstraintAdjustment, "PlacementConstraintAdjustment");
        }
        if (!object.Equals(Popup.PlacementGravityProperty.GetDefaultValue(typeof(Popup)), value.PlacementGravity))
        {
            writer.WriteMember(value, value.PlacementGravity, "PlacementGravity");
        }
        if (!object.Equals(Popup.PlacementProperty.GetDefaultValue(typeof(Popup)), value.Placement))
        {
            writer.WriteMember(value, value.Placement, "Placement");
        }
        if (!object.Equals(Popup.PlacementRectProperty.GetDefaultValue(typeof(Popup)), value.PlacementRect))
        {
            writer.WriteMember(value, value.PlacementRect, "PlacementRect");
        }
        if (!object.Equals(Popup.PlacementTargetProperty.GetDefaultValue(typeof(Popup)), value.PlacementTarget))
        {
            writer.WriteMember(value, value.PlacementTarget, "PlacementTarget");
        }
        if (!object.Equals(Popup.OverlayDismissEventPassThroughProperty.GetDefaultValue(typeof(Popup)), value.OverlayDismissEventPassThrough))
        {
            writer.WriteMember(value, value.OverlayDismissEventPassThrough, "OverlayDismissEventPassThrough");
        }
        if (!object.Equals(Popup.OverlayInputPassThroughElementProperty.GetDefaultValue(typeof(Popup)), value.OverlayInputPassThroughElement))
        {
            writer.WriteMember(value, value.OverlayInputPassThroughElement, "OverlayInputPassThroughElement");
        }
        if (!object.Equals(Popup.HorizontalOffsetProperty.GetDefaultValue(typeof(Popup)), value.HorizontalOffset))
        {
            writer.WriteMember(value, value.HorizontalOffset, "HorizontalOffset");
        }
        if (!object.Equals(Popup.VerticalOffsetProperty.GetDefaultValue(typeof(Popup)), value.VerticalOffset))
        {
            writer.WriteMember(value, value.VerticalOffset, "VerticalOffset");
        }
        if (!object.Equals(Popup.TopmostProperty.GetDefaultValue(typeof(Popup)), value.Topmost))
        {
            writer.WriteMember(value, value.Topmost, "Topmost");
        }
         writer.WriteMember(value, value.IsPointerOverPopup, "IsPointerOverPopup");
    }
}
