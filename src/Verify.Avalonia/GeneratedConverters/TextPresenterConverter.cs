// <auto-generated />
#nullable enable
class TextPresenterConverter :
    WriteOnlyJsonConverter<TextPresenter>
{
    public override void Write(VerifyJsonWriter writer, TextPresenter value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, TextPresenter value)
    {
        var type = typeof(TextPresenter);
        if (value.ShouldIncludeProperty(TextPresenter.BackgroundProperty))
        if (!object.Equals(TextPresenter.BackgroundProperty.GetDefaultValue(type), value.Background))
        {
            writer.WriteMember(value, value.Background, "Background");
        }
        if (value.ShouldIncludeProperty(TextPresenter.TextProperty))
        if (!object.Equals(TextPresenter.TextProperty.GetDefaultValue(type), value.Text))
        {
            writer.WriteMember(value, value.Text, "Text");
        }
        if (value.ShouldIncludeProperty(TextPresenter.PreeditTextProperty))
        if (!object.Equals(TextPresenter.PreeditTextProperty.GetDefaultValue(type), value.PreeditText))
        {
            writer.WriteMember(value, value.PreeditText, "PreeditText");
        }
        writer.WriteMember(value, value.FontFamily, "FontFamily");
        writer.WriteMember(value, value.FontSize, "FontSize");
        writer.WriteMember(value, value.FontStyle, "FontStyle");
        writer.WriteMember(value, value.FontWeight, "FontWeight");
        writer.WriteMember(value, value.FontStretch, "FontStretch");
        writer.WriteMember(value, value.Foreground, "Foreground");
        if (value.ShouldIncludeProperty(TextPresenter.TextWrappingProperty))
        if (!object.Equals(TextPresenter.TextWrappingProperty.GetDefaultValue(type), value.TextWrapping))
        {
            writer.WriteMember(value, value.TextWrapping, "TextWrapping");
        }
        if (value.ShouldIncludeProperty(TextPresenter.LineHeightProperty))
        if (!object.Equals(TextPresenter.LineHeightProperty.GetDefaultValue(type), value.LineHeight))
        {
            writer.WriteMember(value, value.LineHeight, "LineHeight");
        }
        if (value.ShouldIncludeProperty(TextPresenter.LetterSpacingProperty))
        if (!object.Equals(TextPresenter.LetterSpacingProperty.GetDefaultValue(type), value.LetterSpacing))
        {
            writer.WriteMember(value, value.LetterSpacing, "LetterSpacing");
        }
        if (value.ShouldIncludeProperty(TextPresenter.TextAlignmentProperty))
        if (!object.Equals(TextPresenter.TextAlignmentProperty.GetDefaultValue(type), value.TextAlignment))
        {
            writer.WriteMember(value, value.TextAlignment, "TextAlignment");
        }
        if (value.ShouldIncludeProperty(TextPresenter.CaretIndexProperty))
        if (!object.Equals(TextPresenter.CaretIndexProperty.GetDefaultValue(type), value.CaretIndex))
        {
            writer.WriteMember(value, value.CaretIndex, "CaretIndex");
        }
        if (value.ShouldIncludeProperty(TextPresenter.PasswordCharProperty))
        if (!object.Equals(TextPresenter.PasswordCharProperty.GetDefaultValue(type), value.PasswordChar))
        {
            writer.WriteMember(value, value.PasswordChar, "PasswordChar");
        }
        if (value.ShouldIncludeProperty(TextPresenter.RevealPasswordProperty))
        if (!object.Equals(TextPresenter.RevealPasswordProperty.GetDefaultValue(type), value.RevealPassword))
        {
            writer.WriteMember(value, value.RevealPassword, "RevealPassword");
        }
        if (value.ShouldIncludeProperty(TextPresenter.SelectionBrushProperty))
        if (!object.Equals(TextPresenter.SelectionBrushProperty.GetDefaultValue(type), value.SelectionBrush))
        {
            writer.WriteMember(value, value.SelectionBrush, "SelectionBrush");
        }
        if (value.ShouldIncludeProperty(TextPresenter.SelectionForegroundBrushProperty))
        if (!object.Equals(TextPresenter.SelectionForegroundBrushProperty.GetDefaultValue(type), value.SelectionForegroundBrush))
        {
            writer.WriteMember(value, value.SelectionForegroundBrush, "SelectionForegroundBrush");
        }
        if (value.ShouldIncludeProperty(TextPresenter.CaretBrushProperty))
        if (!object.Equals(TextPresenter.CaretBrushProperty.GetDefaultValue(type), value.CaretBrush))
        {
            writer.WriteMember(value, value.CaretBrush, "CaretBrush");
        }
        if (value.ShouldIncludeProperty(TextPresenter.SelectionStartProperty))
        if (!object.Equals(TextPresenter.SelectionStartProperty.GetDefaultValue(type), value.SelectionStart))
        {
            writer.WriteMember(value, value.SelectionStart, "SelectionStart");
        }
        if (value.ShouldIncludeProperty(TextPresenter.SelectionEndProperty))
        if (!object.Equals(TextPresenter.SelectionEndProperty.GetDefaultValue(type), value.SelectionEnd))
        {
            writer.WriteMember(value, value.SelectionEnd, "SelectionEnd");
        }
    }
}
