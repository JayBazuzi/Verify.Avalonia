// <auto-generated />
class TextPresenterConverter :
    WriteOnlyJsonConverter<TextPresenter>
{
    public override void Write(VerifyJsonWriter writer, TextPresenter value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, TextPresenter value)
    {
         if (TextPresenter.BackgroundProperty.GetDefaultValue(typeof(TextPresenter)) != value.Background)
         {
             writer.WriteMember(value, value.Background, "Background");
         }
         if (TextPresenter.TextProperty.GetDefaultValue(typeof(TextPresenter)) != value.Text)
         {
             writer.WriteMember(value, value.Text, "Text");
         }
         if (TextPresenter.PreeditTextProperty.GetDefaultValue(typeof(TextPresenter)) != value.PreeditText)
         {
             writer.WriteMember(value, value.PreeditText, "PreeditText");
         }
         writer.WriteMember(value, value.FontFamily, "FontFamily");
         writer.WriteMember(value, value.FontSize, "FontSize");
         writer.WriteMember(value, value.FontStyle, "FontStyle");
         writer.WriteMember(value, value.FontWeight, "FontWeight");
         writer.WriteMember(value, value.FontStretch, "FontStretch");
         writer.WriteMember(value, value.Foreground, "Foreground");
         if (!TextPresenter.TextWrappingProperty.GetDefaultValue(typeof(TextPresenter)).Equals(value.TextWrapping))
         {
             writer.WriteMember(value, value.TextWrapping, "TextWrapping");
         }
         if (!TextPresenter.LineHeightProperty.GetDefaultValue(typeof(TextPresenter)).Equals(value.LineHeight))
         {
             writer.WriteMember(value, value.LineHeight, "LineHeight");
         }
         if (!TextPresenter.LetterSpacingProperty.GetDefaultValue(typeof(TextPresenter)).Equals(value.LetterSpacing))
         {
             writer.WriteMember(value, value.LetterSpacing, "LetterSpacing");
         }
         if (!TextPresenter.TextAlignmentProperty.GetDefaultValue(typeof(TextPresenter)).Equals(value.TextAlignment))
         {
             writer.WriteMember(value, value.TextAlignment, "TextAlignment");
         }
         writer.WriteMember(value, value.TextLayout, "TextLayout");
         if (!TextPresenter.CaretIndexProperty.GetDefaultValue(typeof(TextPresenter)).Equals(value.CaretIndex))
         {
             writer.WriteMember(value, value.CaretIndex, "CaretIndex");
         }
         if (!TextPresenter.PasswordCharProperty.GetDefaultValue(typeof(TextPresenter)).Equals(value.PasswordChar))
         {
             writer.WriteMember(value, value.PasswordChar, "PasswordChar");
         }
         if (!TextPresenter.RevealPasswordProperty.GetDefaultValue(typeof(TextPresenter)).Equals(value.RevealPassword))
         {
             writer.WriteMember(value, value.RevealPassword, "RevealPassword");
         }
         if (TextPresenter.SelectionBrushProperty.GetDefaultValue(typeof(TextPresenter)) != value.SelectionBrush)
         {
             writer.WriteMember(value, value.SelectionBrush, "SelectionBrush");
         }
         if (TextPresenter.SelectionForegroundBrushProperty.GetDefaultValue(typeof(TextPresenter)) != value.SelectionForegroundBrush)
         {
             writer.WriteMember(value, value.SelectionForegroundBrush, "SelectionForegroundBrush");
         }
         if (TextPresenter.CaretBrushProperty.GetDefaultValue(typeof(TextPresenter)) != value.CaretBrush)
         {
             writer.WriteMember(value, value.CaretBrush, "CaretBrush");
         }
         if (!TextPresenter.SelectionStartProperty.GetDefaultValue(typeof(TextPresenter)).Equals(value.SelectionStart))
         {
             writer.WriteMember(value, value.SelectionStart, "SelectionStart");
         }
         if (!TextPresenter.SelectionEndProperty.GetDefaultValue(typeof(TextPresenter)).Equals(value.SelectionEnd))
         {
             writer.WriteMember(value, value.SelectionEnd, "SelectionEnd");
         }
    }
}
