// <auto-generated />
#nullable enable
class TextPresenterConverter :
    WriteOnlyJsonConverter<TextPresenter>
{
    public override void Write(VerifyJsonWriter writer, TextPresenter value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, TextPresenter value)
    {
        var type = typeof(TextPresenter);
        if (TextPresenter.BackgroundProperty.ShouldIncludeProperty(value, value.Background))
        {
            writer.WriteMember(value, value.Background, "Background");
        }
        if (TextPresenter.TextProperty.ShouldIncludeProperty(value, value.Text))
        {
            writer.WriteMember(value, value.Text, "Text");
        }
        if (TextPresenter.PreeditTextProperty.ShouldIncludeProperty(value, value.PreeditText))
        {
            writer.WriteMember(value, value.PreeditText, "PreeditText");
        }
        writer.WriteMember(value, value.FontFamily, "FontFamily");
        writer.WriteMember(value, value.FontSize, "FontSize");
        writer.WriteMember(value, value.FontStyle, "FontStyle");
        writer.WriteMember(value, value.FontWeight, "FontWeight");
        writer.WriteMember(value, value.FontStretch, "FontStretch");
        writer.WriteMember(value, value.Foreground, "Foreground");
        if (TextPresenter.TextWrappingProperty.ShouldIncludeProperty(value, value.TextWrapping))
        {
            writer.WriteMember(value, value.TextWrapping, "TextWrapping");
        }
        if (TextPresenter.LineHeightProperty.ShouldIncludeProperty(value, value.LineHeight))
        {
            writer.WriteMember(value, value.LineHeight, "LineHeight");
        }
        if (TextPresenter.LetterSpacingProperty.ShouldIncludeProperty(value, value.LetterSpacing))
        {
            writer.WriteMember(value, value.LetterSpacing, "LetterSpacing");
        }
        if (TextPresenter.TextAlignmentProperty.ShouldIncludeProperty(value, value.TextAlignment))
        {
            writer.WriteMember(value, value.TextAlignment, "TextAlignment");
        }
        if (TextPresenter.CaretIndexProperty.ShouldIncludeProperty(value, value.CaretIndex))
        {
            writer.WriteMember(value, value.CaretIndex, "CaretIndex");
        }
        if (TextPresenter.PasswordCharProperty.ShouldIncludeProperty(value, value.PasswordChar))
        {
            writer.WriteMember(value, value.PasswordChar, "PasswordChar");
        }
        if (TextPresenter.RevealPasswordProperty.ShouldIncludeProperty(value, value.RevealPassword))
        {
            writer.WriteMember(value, value.RevealPassword, "RevealPassword");
        }
        if (TextPresenter.SelectionBrushProperty.ShouldIncludeProperty(value, value.SelectionBrush))
        {
            writer.WriteMember(value, value.SelectionBrush, "SelectionBrush");
        }
        if (TextPresenter.SelectionForegroundBrushProperty.ShouldIncludeProperty(value, value.SelectionForegroundBrush))
        {
            writer.WriteMember(value, value.SelectionForegroundBrush, "SelectionForegroundBrush");
        }
        if (TextPresenter.CaretBrushProperty.ShouldIncludeProperty(value, value.CaretBrush))
        {
            writer.WriteMember(value, value.CaretBrush, "CaretBrush");
        }
        if (TextPresenter.SelectionStartProperty.ShouldIncludeProperty(value, value.SelectionStart))
        {
            writer.WriteMember(value, value.SelectionStart, "SelectionStart");
        }
        if (TextPresenter.SelectionEndProperty.ShouldIncludeProperty(value, value.SelectionEnd))
        {
            writer.WriteMember(value, value.SelectionEnd, "SelectionEnd");
        }
    }
}
