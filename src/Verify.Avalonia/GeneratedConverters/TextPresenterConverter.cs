// <auto-generated />
#nullable enable
class TextPresenterConverter :
    WriteOnlyJsonConverter<TextPresenter>
{
    public override void Write(VerifyJsonWriter writer, TextPresenter value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, TextPresenter value)
    {
        if (!object.Equals(TextPresenter.BackgroundProperty.GetDefaultValue(typeof(TextPresenter)), value.Background))
        {
            writer.WriteMember(value, value.Background, "Background");
        }
        if (!object.Equals(TextPresenter.TextProperty.GetDefaultValue(typeof(TextPresenter)), value.Text))
        {
            writer.WriteMember(value, value.Text, "Text");
        }
        if (!object.Equals(TextPresenter.PreeditTextProperty.GetDefaultValue(typeof(TextPresenter)), value.PreeditText))
        {
            writer.WriteMember(value, value.PreeditText, "PreeditText");
        }
         writer.WriteMember(value, value.FontFamily, "FontFamily");
         writer.WriteMember(value, value.FontSize, "FontSize");
         writer.WriteMember(value, value.FontStyle, "FontStyle");
         writer.WriteMember(value, value.FontWeight, "FontWeight");
         writer.WriteMember(value, value.FontStretch, "FontStretch");
         writer.WriteMember(value, value.Foreground, "Foreground");
        if (!object.Equals(TextPresenter.TextWrappingProperty.GetDefaultValue(typeof(TextPresenter)), value.TextWrapping))
        {
            writer.WriteMember(value, value.TextWrapping, "TextWrapping");
        }
        if (!object.Equals(TextPresenter.LineHeightProperty.GetDefaultValue(typeof(TextPresenter)), value.LineHeight))
        {
            writer.WriteMember(value, value.LineHeight, "LineHeight");
        }
        if (!object.Equals(TextPresenter.LetterSpacingProperty.GetDefaultValue(typeof(TextPresenter)), value.LetterSpacing))
        {
            writer.WriteMember(value, value.LetterSpacing, "LetterSpacing");
        }
        if (!object.Equals(TextPresenter.TextAlignmentProperty.GetDefaultValue(typeof(TextPresenter)), value.TextAlignment))
        {
            writer.WriteMember(value, value.TextAlignment, "TextAlignment");
        }
         writer.WriteMember(value, value.TextLayout, "TextLayout");
        if (!object.Equals(TextPresenter.CaretIndexProperty.GetDefaultValue(typeof(TextPresenter)), value.CaretIndex))
        {
            writer.WriteMember(value, value.CaretIndex, "CaretIndex");
        }
        if (!object.Equals(TextPresenter.PasswordCharProperty.GetDefaultValue(typeof(TextPresenter)), value.PasswordChar))
        {
            writer.WriteMember(value, value.PasswordChar, "PasswordChar");
        }
        if (!object.Equals(TextPresenter.RevealPasswordProperty.GetDefaultValue(typeof(TextPresenter)), value.RevealPassword))
        {
            writer.WriteMember(value, value.RevealPassword, "RevealPassword");
        }
        if (!object.Equals(TextPresenter.SelectionBrushProperty.GetDefaultValue(typeof(TextPresenter)), value.SelectionBrush))
        {
            writer.WriteMember(value, value.SelectionBrush, "SelectionBrush");
        }
        if (!object.Equals(TextPresenter.SelectionForegroundBrushProperty.GetDefaultValue(typeof(TextPresenter)), value.SelectionForegroundBrush))
        {
            writer.WriteMember(value, value.SelectionForegroundBrush, "SelectionForegroundBrush");
        }
        if (!object.Equals(TextPresenter.CaretBrushProperty.GetDefaultValue(typeof(TextPresenter)), value.CaretBrush))
        {
            writer.WriteMember(value, value.CaretBrush, "CaretBrush");
        }
        if (!object.Equals(TextPresenter.SelectionStartProperty.GetDefaultValue(typeof(TextPresenter)), value.SelectionStart))
        {
            writer.WriteMember(value, value.SelectionStart, "SelectionStart");
        }
        if (!object.Equals(TextPresenter.SelectionEndProperty.GetDefaultValue(typeof(TextPresenter)), value.SelectionEnd))
        {
            writer.WriteMember(value, value.SelectionEnd, "SelectionEnd");
        }
    }

    public static bool MemberHasValue(TextPresenter target, string member, object? value)
    {
        if (member == "Background")
        {
            return object.Equals(target.Background, value);
        }
        if (member == "Text")
        {
            return object.Equals(target.Text, value);
        }
        if (member == "PreeditText")
        {
            return object.Equals(target.PreeditText, value);
        }
        if (member == "FontFamily")
        {
            return object.Equals(target.FontFamily, value);
        }
        if (member == "FontSize")
        {
            return object.Equals(target.FontSize, value);
        }
        if (member == "FontStyle")
        {
            return object.Equals(target.FontStyle, value);
        }
        if (member == "FontWeight")
        {
            return object.Equals(target.FontWeight, value);
        }
        if (member == "FontStretch")
        {
            return object.Equals(target.FontStretch, value);
        }
        if (member == "Foreground")
        {
            return object.Equals(target.Foreground, value);
        }
        if (member == "TextWrapping")
        {
            return object.Equals(target.TextWrapping, value);
        }
        if (member == "LineHeight")
        {
            return object.Equals(target.LineHeight, value);
        }
        if (member == "LetterSpacing")
        {
            return object.Equals(target.LetterSpacing, value);
        }
        if (member == "TextAlignment")
        {
            return object.Equals(target.TextAlignment, value);
        }
        if (member == "TextLayout")
        {
            return object.Equals(target.TextLayout, value);
        }
        if (member == "CaretIndex")
        {
            return object.Equals(target.CaretIndex, value);
        }
        if (member == "PasswordChar")
        {
            return object.Equals(target.PasswordChar, value);
        }
        if (member == "RevealPassword")
        {
            return object.Equals(target.RevealPassword, value);
        }
        if (member == "SelectionBrush")
        {
            return object.Equals(target.SelectionBrush, value);
        }
        if (member == "SelectionForegroundBrush")
        {
            return object.Equals(target.SelectionForegroundBrush, value);
        }
        if (member == "CaretBrush")
        {
            return object.Equals(target.CaretBrush, value);
        }
        if (member == "SelectionStart")
        {
            return object.Equals(target.SelectionStart, value);
        }
        if (member == "SelectionEnd")
        {
            return object.Equals(target.SelectionEnd, value);
        }
        throw new($"Member not found: {member}");
    }
}
