// <auto-generated />
#nullable enable
class ShapeConverter :
    WriteOnlyJsonConverter<Shape>,
    IAvaloniaConverter<Shape>
{
    public override void Write(VerifyJsonWriter writer, Shape value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Shape value)
    {
         writer.WriteMember(value, value.DefiningGeometry, "DefiningGeometry");
         writer.WriteMember(value, value.RenderedGeometry, "RenderedGeometry");
        if (!object.Equals(Shape.FillProperty.GetDefaultValue(typeof(Shape)), value.Fill))
        {
            writer.WriteMember(value, value.Fill, "Fill");
        }
        if (!object.Equals(Shape.StretchProperty.GetDefaultValue(typeof(Shape)), value.Stretch))
        {
            writer.WriteMember(value, value.Stretch, "Stretch");
        }
        if (!object.Equals(Shape.StrokeProperty.GetDefaultValue(typeof(Shape)), value.Stroke))
        {
            writer.WriteMember(value, value.Stroke, "Stroke");
        }
        if (!object.Equals(Shape.StrokeDashArrayProperty.GetDefaultValue(typeof(Shape)), value.StrokeDashArray))
        {
            writer.WriteMember(value, value.StrokeDashArray, "StrokeDashArray");
        }
        if (!object.Equals(Shape.StrokeDashOffsetProperty.GetDefaultValue(typeof(Shape)), value.StrokeDashOffset))
        {
            writer.WriteMember(value, value.StrokeDashOffset, "StrokeDashOffset");
        }
        if (!object.Equals(Shape.StrokeThicknessProperty.GetDefaultValue(typeof(Shape)), value.StrokeThickness))
        {
            writer.WriteMember(value, value.StrokeThickness, "StrokeThickness");
        }
        if (!object.Equals(Shape.StrokeLineCapProperty.GetDefaultValue(typeof(Shape)), value.StrokeLineCap))
        {
            writer.WriteMember(value, value.StrokeLineCap, "StrokeLineCap");
        }
        if (!object.Equals(Shape.StrokeJoinProperty.GetDefaultValue(typeof(Shape)), value.StrokeJoin))
        {
            writer.WriteMember(value, value.StrokeJoin, "StrokeJoin");
        }
    }

    public static bool MemberHasValue(Shape target, string member, object? value)
    {
        if (member == "DefiningGeometry")
        {
            return object.Equals(target.DefiningGeometry, value);
        }
        if (member == "RenderedGeometry")
        {
            return object.Equals(target.RenderedGeometry, value);
        }
        if (member == "Fill")
        {
            return object.Equals(target.Fill, value);
        }
        if (member == "Stretch")
        {
            return object.Equals(target.Stretch, value);
        }
        if (member == "Stroke")
        {
            return object.Equals(target.Stroke, value);
        }
        if (member == "StrokeDashArray")
        {
            return object.Equals(target.StrokeDashArray, value);
        }
        if (member == "StrokeDashOffset")
        {
            return object.Equals(target.StrokeDashOffset, value);
        }
        if (member == "StrokeThickness")
        {
            return object.Equals(target.StrokeThickness, value);
        }
        if (member == "StrokeLineCap")
        {
            return object.Equals(target.StrokeLineCap, value);
        }
        if (member == "StrokeJoin")
        {
            return object.Equals(target.StrokeJoin, value);
        }
        ControlConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
