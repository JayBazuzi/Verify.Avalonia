// <auto-generated />
#nullable enable
class ScrollBarConverter :
    WriteOnlyJsonConverter<ScrollBar>,
    IAvaloniaConverter<ScrollBar>
{
    public override void Write(VerifyJsonWriter writer, ScrollBar value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        RangeBaseConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, ScrollBar value)
    {
        if (!object.Equals(ScrollBar.ViewportSizeProperty.GetDefaultValue(typeof(ScrollBar)), value.ViewportSize))
        {
            writer.WriteMember(value, value.ViewportSize, "ViewportSize");
        }
        if (!object.Equals(ScrollBar.VisibilityProperty.GetDefaultValue(typeof(ScrollBar)), value.Visibility))
        {
            writer.WriteMember(value, value.Visibility, "Visibility");
        }
        if (!object.Equals(ScrollBar.OrientationProperty.GetDefaultValue(typeof(ScrollBar)), value.Orientation))
        {
            writer.WriteMember(value, value.Orientation, "Orientation");
        }
        if (!object.Equals(ScrollBar.IsExpandedProperty.GetUnsetValue(typeof(ScrollBar)), value.IsExpanded))
        {
            writer.WriteMember(value, value.IsExpanded, "IsExpanded");
        }
        if (!object.Equals(ScrollBar.AllowAutoHideProperty.GetDefaultValue(typeof(ScrollBar)), value.AllowAutoHide))
        {
            writer.WriteMember(value, value.AllowAutoHide, "AllowAutoHide");
        }
        if (!object.Equals(ScrollBar.HideDelayProperty.GetDefaultValue(typeof(ScrollBar)), value.HideDelay))
        {
            writer.WriteMember(value, value.HideDelay, "HideDelay");
        }
        if (!object.Equals(ScrollBar.ShowDelayProperty.GetDefaultValue(typeof(ScrollBar)), value.ShowDelay))
        {
            writer.WriteMember(value, value.ShowDelay, "ShowDelay");
        }
    }

    public static bool MemberHasValue(ScrollBar target, string member, object? value)
    {
        if (member == "ViewportSize")
        {
            return object.Equals(target.ViewportSize, value);
        }
        if (member == "Visibility")
        {
            return object.Equals(target.Visibility, value);
        }
        if (member == "Orientation")
        {
            return object.Equals(target.Orientation, value);
        }
        if (member == "IsExpanded")
        {
            return object.Equals(target.IsExpanded, value);
        }
        if (member == "AllowAutoHide")
        {
            return object.Equals(target.AllowAutoHide, value);
        }
        if (member == "HideDelay")
        {
            return object.Equals(target.HideDelay, value);
        }
        if (member == "ShowDelay")
        {
            return object.Equals(target.ShowDelay, value);
        }
        RangeBaseConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
