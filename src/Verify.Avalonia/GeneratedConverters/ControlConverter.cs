// <auto-generated />
#nullable enable
class ControlConverter :
    WriteOnlyJsonConverter<Control>
{
    public override void Write(VerifyJsonWriter writer, Control value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        InputElementConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Control value)
    {
        if (!object.Equals(Control.FocusAdornerProperty.GetDefaultValue(typeof(Control)), value.FocusAdorner))
        {
            writer.WriteMember(value, value.FocusAdorner, "FocusAdorner");
        }
         writer.WriteMember(value, value.DataTemplates, "DataTemplates");
        if (!object.Equals(Control.ContextMenuProperty.GetDefaultValue(typeof(Control)), value.ContextMenu))
        {
            writer.WriteMember(value, value.ContextMenu, "ContextMenu");
        }
        if (!object.Equals(Control.ContextFlyoutProperty.GetDefaultValue(typeof(Control)), value.ContextFlyout))
        {
            writer.WriteMember(value, value.ContextFlyout, "ContextFlyout");
        }
         writer.WriteMember(value, value.IsLoaded, "IsLoaded");
        if (!object.Equals(Control.TagProperty.GetDefaultValue(typeof(Control)), value.Tag))
        {
            writer.WriteMember(value, value.Tag, "Tag");
        }
    }

    public static bool MemberHasValue(Control target, string member, object? value)
    {
        if (member == "FocusAdorner")
        {
            return object.Equals(target.FocusAdorner, value);
        }
        if (member == "DataTemplates")
        {
            return object.Equals(target.DataTemplates, value);
        }
        if (member == "ContextMenu")
        {
            return object.Equals(target.ContextMenu, value);
        }
        if (member == "ContextFlyout")
        {
            return object.Equals(target.ContextFlyout, value);
        }
        if (member == "IsLoaded")
        {
            return object.Equals(target.IsLoaded, value);
        }
        if (member == "Tag")
        {
            return object.Equals(target.Tag, value);
        }
        throw new($"Member not found: {member}");
    }
}
