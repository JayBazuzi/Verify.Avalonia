// <auto-generated />
#nullable enable
class TopLevelConverter :
    WriteOnlyJsonConverter<TopLevel>
{
    public override void Write(VerifyJsonWriter writer, TopLevel value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ContentControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, TopLevel value)
    {
        var type = typeof(TopLevel);
        if (TopLevel.ClientSizeProperty.ShouldIncludeProperty(value, value.ClientSize))
        {
            writer.WriteMember(value, value.ClientSize, "ClientSize");
        }
        if (TopLevel.FrameSizeProperty.ShouldIncludeProperty(value, value.FrameSize))
        {
            writer.WriteMember(value, value.FrameSize, "FrameSize");
        }
        if (TopLevel.TransparencyLevelHintProperty.ShouldIncludeProperty(value, value.TransparencyLevelHint))
        {
            writer.WriteMember(value, value.TransparencyLevelHint, "TransparencyLevelHint");
        }
        if (TopLevel.ActualTransparencyLevelProperty.ShouldIncludeProperty(value, value.ActualTransparencyLevel))
        {
            writer.WriteMember(value, value.ActualTransparencyLevel, "ActualTransparencyLevel");
        }
        if (TopLevel.TransparencyBackgroundFallbackProperty.ShouldIncludeProperty(value, value.TransparencyBackgroundFallback))
        {
            writer.WriteMember(value, value.TransparencyBackgroundFallback, "TransparencyBackgroundFallback");
        }
        if (TopLevel.RequestedThemeVariantProperty.ShouldIncludeProperty(value, value.RequestedThemeVariant))
        {
            writer.WriteMember(value, value.RequestedThemeVariant, "RequestedThemeVariant");
        }
        writer.WriteMember(value, value.PlatformImpl, "PlatformImpl");
        writer.WriteMember(value, value.RendererDiagnostics, "RendererDiagnostics");
        writer.WriteMember(value, value.RenderScaling, "RenderScaling");
        writer.WriteMember(value, value.StorageProvider, "StorageProvider");
        writer.WriteMember(value, value.InsetsManager, "InsetsManager");
        writer.WriteMember(value, value.Clipboard, "Clipboard");
        writer.WriteMember(value, value.FocusManager, "FocusManager");
        writer.WriteMember(value, value.PlatformSettings, "PlatformSettings");
    }
}
