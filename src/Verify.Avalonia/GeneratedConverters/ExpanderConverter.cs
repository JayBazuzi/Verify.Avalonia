// <auto-generated />
#nullable enable
class ExpanderConverter :
    WriteOnlyJsonConverter<Expander>
{
    public override void Write(VerifyJsonWriter writer, Expander value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        HeaderedContentControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, Expander value)
    {
        if (!object.Equals(Expander.ContentTransitionProperty.GetDefaultValue(typeof(Expander)), value.ContentTransition))
        {
            writer.WriteMember(value, value.ContentTransition, "ContentTransition");
        }
        if (!object.Equals(Expander.ExpandDirectionProperty.GetDefaultValue(typeof(Expander)), value.ExpandDirection))
        {
            writer.WriteMember(value, value.ExpandDirection, "ExpandDirection");
        }
        if (!object.Equals(Expander.IsExpandedProperty.GetDefaultValue(typeof(Expander)), value.IsExpanded))
        {
            writer.WriteMember(value, value.IsExpanded, "IsExpanded");
        }
    }

    public static bool MemberHasValue(Expander target, string member, object? value)
    {
        if (member == "ContentTransition")
        {
            return object.Equals(target.ContentTransition, value);
        }
        if (member == "ExpandDirection")
        {
            return object.Equals(target.ExpandDirection, value);
        }
        if (member == "IsExpanded")
        {
            return object.Equals(target.IsExpanded, value);
        }
        HeaderedContentControlConverter.MemberHasValue(target, member, value);
        throw new($"Member not found: {member}");
    }
}
