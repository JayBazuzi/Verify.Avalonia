// <auto-generated />
class SplitViewConverter :
    WriteOnlyJsonConverter<SplitView>
{
    public override void Write(VerifyJsonWriter writer, SplitView value)
    {
        writer.WriteStartObject();
        VerifyAvalonia.WriteGeneratedMembers(writer, value);
        WriteMembers(writer, value);
        ContentControlConverter.WriteMembers(writer, value);
        writer.WriteEndObject();
    }

    public static void WriteMembers(VerifyJsonWriter writer, SplitView value)
    {
         if (SplitView.CompactPaneLengthProperty.GetDefaultValue(typeof(SplitView)) != value.CompactPaneLength)
         {
             writer.WriteMember(value, value.CompactPaneLength, "CompactPaneLength");
         }
         if (SplitView.DisplayModeProperty.GetDefaultValue(typeof(SplitView)) != value.DisplayMode)
         {
             writer.WriteMember(value, value.DisplayMode, "DisplayMode");
         }
         if (SplitView.IsPaneOpenProperty.GetDefaultValue(typeof(SplitView)) != value.IsPaneOpen)
         {
             writer.WriteMember(value, value.IsPaneOpen, "IsPaneOpen");
         }
         if (SplitView.OpenPaneLengthProperty.GetDefaultValue(typeof(SplitView)) != value.OpenPaneLength)
         {
             writer.WriteMember(value, value.OpenPaneLength, "OpenPaneLength");
         }
         if (SplitView.PaneBackgroundProperty.GetDefaultValue(typeof(SplitView)) != value.PaneBackground)
         {
             writer.WriteMember(value, value.PaneBackground, "PaneBackground");
         }
         if (SplitView.PanePlacementProperty.GetDefaultValue(typeof(SplitView)) != value.PanePlacement)
         {
             writer.WriteMember(value, value.PanePlacement, "PanePlacement");
         }
         if (SplitView.PaneProperty.GetDefaultValue(typeof(SplitView)) != value.Pane)
         {
             writer.WriteMember(value, value.Pane, "Pane");
         }
         if (SplitView.PaneTemplateProperty.GetDefaultValue(typeof(SplitView)) != value.PaneTemplate)
         {
             writer.WriteMember(value, value.PaneTemplate, "PaneTemplate");
         }
         if (SplitView.UseLightDismissOverlayModeProperty.GetDefaultValue(typeof(SplitView)) != value.UseLightDismissOverlayMode)
         {
             writer.WriteMember(value, value.UseLightDismissOverlayMode, "UseLightDismissOverlayMode");
         }
         if (SplitView.TemplateSettingsProperty.GetUnsetValue(typeof(SplitView)) != value.TemplateSettings)
         {
             writer.WriteMember(value, value.TemplateSettings, "TemplateSettings");
         }
    }
}
